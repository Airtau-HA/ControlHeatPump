/*
 * Copyright (c) 2016-2018 by Pavel Panfilov <firstlast2007@gmail.com> skype pav2000pav
 * "Народный контроллер" для тепловых насосов.
 * Данное програмноое обеспечение предназначено для управления
 * различными типами тепловых насосов для отопления и ГВС.
 *
 * This file is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 * GNU General Public License for more details.
 */ 

#ifndef Config_h
#define Config_h
#include <Ethernet.h>                       // Нужна для определения SPI_RATE в w5100.h

// Определения нужные в этом файле ====================================================================================
// --------------------------------------------------------------------------------
// ДАТЧИКИ и УСТРОЙСТВА - максимально поддерживаемые
// --------------------------------------------------------------------------------
#define TNUMBER     14      // Максимальное число температурных датчиков (то что поддерживается)
#define IPNUMBER    1       // Максимальное число удаленных датчиков, запрет использования  SENSOR_IP
#define ANUMBER     2       // Максимальное число аналоговых датчиков (то что поддерживается)

//  Перечисляемый тип -ТИПЫ датчиков сухой контакт
enum TYPE_SENSOR          
{
  pALARM,                    // 0 Аварийный датчик, его срабатываение приводит к аварии и останове Тн
  pSENSOR,                   // 1 Обычный датчик, его значение используется в алгоритмах ТН
  pPULSE,                    // 2 Импульсный висит на прерывании и считает частоты - выходная величина ЧАСТОТА не используется
  pEND13                     // Обязательно должен быть последним, добавляем ПЕРЕД!!!
};
// Конец определений ==================================================================================================

// --------------------------------------------------------------------------------
// КОНФИГУРАЦИИ ТН ----------------------------------------------------------------
// --------------------------------------------------------------------------------
// Конфигурации - может быть только одна!!
// Раскоментируйте нужную конфигурацию  и закоментируйте не нужную.
//#define CONFIG_1             // УФА  Старт стоп Компрессор с ТРВ переливная схема
//#define CONFIG_2             // sheeny   Воздушный Старт стоп  с шаговым ЭРВ, РТО и датчиком давления испарителя
//#define CONFIG_3             // dimex    инвертор+ЭРВ + с РТО и датчиком давления испарителя
//#define CONFIG_4             // dobrinia инвертор+ЭРВ + с РТО и датчиком давления испарителя
//#define CONFIG_5               // pav2000inv  Инвертор BLDC с шаговым ЭРВ и РТО
#define CONFIG_6             // vad7     Частотник Vacon, 3 фазы, ЭРВ, РТО, 2 датчика давления

// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   1 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
#ifdef CONFIG_1    // Имя и описание конфигурации и ОСОБЕННОСТИ конфигурации ---------------------------------------------------------
    #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "VictorUfa"                                 // Имя конфигурации
    #define CONFIG_NOTE   "Старт-стоп Компрессор скролл с ТРВ и РТО"  // Описание конфигурации
    #define HP_SCHEME       1                                          // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
  //  #define I2C_EEPROM_64KB                                         // В самосборе этого нет!!!!!! Использование памяти I2C для записи журнала.При коментарии используется оперативка
    #define I2C_FRAM_MEMORY       0                                   // + Тип используемой памяти 0 - Флеш 1 (обычно) - FRAM память (vad711)
    // ЖЕЛЕЗО  - привязка к ногам контроллера  В зависимости от конкретной схемы и платы
    // Для каждой конфигурации теперь свои определения!!!
    // --------------------------------------------------------------------------------
    // SPI шина управление отдельными устройствами до 3 устройств
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
 // #define RELAY_INVERT                // инвертирование реле выходов реле
    #ifdef EXTERNAL_AREF                     // Какая опора для АЦП используется
         #define SAM3X_ADC_REF  2.5006         // Используется внешняя опора ADR4525ARZ плата pav2000 (UT71E результататы ЗИП 2.4997 ТН 2.5006)
    #else
         #define SAM3X_ADC_REF  3.30           // Штатное подключение используется питание DUE
     #endif
  // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
  const IPAddress defaultIP(192, 168, 0, 170);
  const IPAddress defaultSDNS(192, 168, 0, 191);
  const IPAddress defaultGateway(192, 168, 0, 1);
  const IPAddress defaultSubnet(255, 255, 255, 0);
  const boolean  defaultDHCP=false;
    // Сервис
    #define PIN_ETH_RES         8       // + Сброс сетевого чипа w5500 активный low
    #define PIN_ETH_CS         10       // + Чип селект SPI w5500
    #define PIN_WIRE_NET       45       // + Перемычка(вход), при установке в 0 при старте делает настроку сети по умолчанию 192.168.1.177  шлюз 192.168.1.1
    #define PIN_WIRE_PW        44       // + Перемычка (вход), при установке в 0 не спрашивает пароль на вход в веб морду
    #define PIN_LED_OK         43       // + Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_BEEP           42       // + Выход на пищалку
    #define PIN_KEY1           88       // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
  
    // EEV куда подключено общий СИНИЙ
    #define PIN_EEV1_D24       24       // ++ первая нога ЭРВ D24  ОРАНЖЕВЫЙ  +А
    #define PIN_EEV2_D25       25       // ++ вторая нога ЭРВ D25  КРАСНЫЙ    +B
    #define PIN_EEV3_D26       26       // ++ третья нога ЭРВ D26  ЖЕЛТЫЙ     -A
    #define PIN_EEV4_D27       27       // ++ четвертая нога ЭРВ D27 ЧЕРНЫЙ   -B

    //Частотный преобразователь
    #define PIN_DEVICE_FC         DAC0  // + DAC
    #define PIN_MODBUS_RSE        2     //   Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)

    // датчики
    #define PIN_ONE_WIRE_BUS   23       // + нога с интерфейсом OneWire ВСЕ температурные датчики
    #define ADC_SENSOR_PEVA    11       // + НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x8e!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    10       // - НОМЕР канала ацп (в нумерации sam3x8e!) нога куда прицеплен датчик давления PCON

   
    // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER     3               // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_SLOWP    29       // ++ Датчик низкого давления
    #define PIN_SENSOR_SHIGHP   30       // ++ Датчик высокого давления
    #define PIN_SENSOR_SFROZEN  31       // -  Датчик заморозки
    #define PIN_SENSOR_SFLOWCON 32       // -  Датчик потока по кондесатору
    #define PIN_SENSOR_SFLOWEVA 33       // -  Датчик потока по испарителю
    #define PIN_SENSOR_SEVA     28       // ++ Датчик протока по испарителю
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define SLOWP       0               // Датчик низкого давления
     #define SHIGHP      1               // Датчик высокого давления
//     #define SFROZEN     2               // Датчик заморозки
//     #define SFLOWCON    3               // Датчик потока по кондесатору
//     #define SFLOWEVA    4               // Датчик потока по испарителю
     #define SEVA        3              // Датчик протока по испарителю
     #define SEVA_OFF    false          // Состояние датчика протока по испарителю конгда протока нет (ошибка)
      // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = {  PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                           PIN_SENSOR_SHIGHP,          // ++ DIN2 Датчик высокого давления
  //                                         PIN_SENSOR_SFROZEN,        // - DIN3 Датчик заморозки
  //                                         PIN_SENSOR_SFLOWCON,       // - DIN4 Датчик потока по кондесатору
  //                                         PIN_SENSOR_SFLOWEVA,       // - DIN5 Датчик потока по испарителю
                                           PIN_SENSOR_SEVA            // - DIN6 Датчик протока по испарителю
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { "Датчик низкого давления",       // аварийный
                                         "Датчик высокого давления",       // аварийный
  //                                     "Датчик разморозки испарителя",  // рабочий
  //                                     "Датчик потока по кондесатору",  // импульсный
  //                                     "Датчик потока по испарителю",   // импульсный
                                         "Датчик протока по испарителю"   // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {"SLOWP",           // Датчик низкого давления
                                        "SHIGHP",          // Датчик высокого давления
 //                                       "SZROZEN"          // Датчик разморозки
 //                                       "SFLOWCON",        // Датчик потока по кондесатору
 //                                       "SFLOWCON",        // Датчик потока по кондесатору
                                         "SEVA"            // Датчик протока по испарителю
                                 };          
              
     
      const bool TESTINPUT[INUMBER]={true,true,true};               // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={true,true,false};             // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ [SEVA 0 - проток есть 1 протока нет]
      const TYPE_SENSOR SENSORTYPE[INUMBER]={pALARM,pALARM,pSENSOR};// тип контактного датчика
  
    
     // ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            2       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   35     // - DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   36     // - DIN5 Датчик потока по испарителю
    #define PIN_SENSOR_FLOWPCON  32     // - DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define FLOWCON        0        // Датчик потока по кондесатору
     #define FLOWEVA        1        // Датчик потока по испарителю
     #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
     const uint8_t pinsFrequency[FNUMBER] = {PIN_SENSOR_FLOWCON,       // - DIN4 Датчик потока по кондесатору
                                             PIN_SENSOR_FLOWEVA        // - DIN5 Датчик потока по испарителю
//                                             PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                             };
      // Описание датчиков
      const char *noteFrequency[FNUMBER] = { "Датчик потока по кондесатору (кубы/час)",       // - DIN4 Датчик потока по кондесатору
                                             "Датчик потока по испарителю (кубы/час)"        // - DIN5 Датчик потока по испарителю
//                                             "Датчик протока по предконденсатору"  // - DIN6 Датчик протока по предконденсатору
                                           };
      // Имена датчиков
      const char *nameFrequency[FNUMBER] = { "FLOWCON",                      // Датчик потока по кондесатору
                                             "FLOWEVA"                       // Датчик потока по кондесатору
 //                                            "FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
              
      const float TRANSFLOW[FNUMBER]={0.43,0.43};                         // Коэффициент преобразования частота - поток
      const uint16_t TESTFLOW[FNUMBER]={700,2100};                        // Значения датчиков при тестировании  опция TEST
      const uint16_t MINFLOW[FNUMBER]= {201,1001};                        // МИНИМАЛЬНЫЕ Значения датчиков
   
       // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define RNUMBER            8       // Число исполнительных устройств (всех)
     // устройства 220 вольт
    #define PIN_DEVICE_RCOMP   46       // + Реле включения компрессора (через пускатель)
    #define PIN_DEVICE_RPUMPI  47       // + Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RPUMPO  48       // + Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_RBOILER 49       // + Включение ТЭНа бойлера
    #define PIN_DEVICE_RTRV    50       // + 4-ходовой клапан
  //  #define PIN_DEVICE_RFAN1   44       // - Реле включения вентилятора испарителя №1
  //  #define PIN_DEVICE_RFAN2   45       // - Реле включения вентилятора испарителя №2
    #define PIN_DEVICE_R3WAY   52       // + Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
  //  #define PIN_DEVICE_REVI    51       // + Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define PIN_DEVICE_RHEAT   51       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
    #define PIN_DEVICE_RPUMPB  53       // + Реле насоса циркуляции бойлера (ГВС)

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
    #define RPUMPI             1          // Реле включения насоса входного контура  (геоконтур)
    #define RPUMPO             2          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define RBOILER            3          // Включение ТЭНа бойлера
    #define RTRV               4          // 4-ходовой клапан (охлаждение)
 //   #define RFAN1              5          // Реле включения вентилятора испарителя №1
 //   #define RFAN2              6          // Реле включения вентилятора испарителя №2
 //   #define REVI               5          // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define R3WAY              5          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define RHEAT              6          // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
    #define RPUMPB             7          // Реле насоса циркуляции бойлера (ГВС)
     
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ PWR_ON1 Реле включения компрессора (через пускатель)
                                        PIN_DEVICE_RPUMPI,      // ++ PWR_ON2 Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RPUMPO,      // ++ PWR_ON3 Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_RBOILER,     // ++ PWR_ON4 Включение ТЭНа бойлера
                                        PIN_DEVICE_RTRV,        // ++ PWR_ON5 4-ходовой клапан
     //                                   PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
     //                                   PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
     //                                   PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                        PIN_DEVICE_R3WAY,       // ++ PWR_ON6 Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
                                        PIN_DEVICE_RHEAT,       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
                                        PIN_DEVICE_RPUMPB       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора (через пускатель)",
                                     "Реле включения насоса входного контура  (геоконтур)",
                                     "Реле включения насоса выходного контура (отопление и ГВС)",
                                     "Реле включение ТЭНа бойлера (ГВС)",
                                     "4-ходовой клапан (для режима охлаждения надо включить)",
    //                                 "Реле включения вентилятора испарителя №1",
    //                                 "Реле включения вентилятора испарителя №2",
    //                                 "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
                                     "Трех ходовой кран, переключение ТН между отоплением и ГВС ",
                                     "Реле включение ТЭНа системы отопления (электрокотел)",
                                     "Реле насоса циркуляции бойлера (ГВС)"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора (через пускатель)
                                     "RPUMPI",         // Реле включения насоса входного контура  (геоконтур)
                                     "RPUMPO",         // Реле включения насоса выхордного контура  (отопление и ГВС)
                                     "RBOILER",        // Реле включение ТЭНа бойлера (ГВС)
                                     "RTRV",           // 4-ходовой клапан инвертирован
    //                                 "RFAN1",          // Реле включения вентилятора испарителя №1
    //                                 "RFAN2",          // Реле включения вентилятора испарителя №2
    //                                 "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                     "R3WAY",          // Трех ходовой кран, переключение ТН между отоплением и ГВС
                                     "RHEAT",          // Реле насоса циркуляции бойлера (ГВС)
                                     "RPUMPB"         // Выход для управления пуском инвертора
                                     } ;  
    


    // Конфигурация системы отопления --------------------------------------------------------------------------------
    // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
    // Могут быть задействованы разные датчики!
      #define FEED      sTemp[TCONOUTG].get_Temp()              // Подача системы СО- выход по гликолю кондесатора
      #define RET       sTemp[TCONING].get_Temp()               // Обратка системы СО- вход по гликолю кондесатора
      
     // Определение насосов конденсатора и испарителя по именам
     #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
     #define PUMP_IN       RPUMPI                               // Насос входного  контура (гео или воздушник)
     
    // ДАТЧИКИ ТЕМПЕРАТУРЫ до 14 шт. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
    // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
    /* Справочно нумерация датчиков
     * Температура хранится в сотых градуса
     * #define TOUT        0                // Температура улицы
     * #define TIN         1                // Температура в доме
     * #define TEVAIN      2                // Температура на входе испарителя (по фреону)
     * #define TEVAOUT     3                // Температура на выходе испарителя (по фреону)
     * #define TCONIN      4                // Температура на входе конденсатора (по фреону)
     * #define TCONOUT     5                // Температура на выходе конденсатора (по фреону)
     * #define TBOILER     6                // Температура в бойлере ГВС
     * #define TACCUM      7                // Температура на выходе теплоаккмулятора
     * #define TRTOOUT     8                // Температура на выходе RTO (по фреону)
     * #define TCOMP       9                // Температура нагнетания компрессора
     * #define TEVAING     10               // Температура на входе испарителя (по гликолю)
     * #define TEVAOUTG    11               // Температура на выходе испарителя (по гликолю)
     * #define TCONING     12               // Температура на входе конденсатора (по гликолю)
     * #define TCONOUTG    13               // Температура на выходе конденсатора (по гликолю)
     */
     const boolean SENSORTEMP[TNUMBER]={true,true,false,false,false,false,true,false,false,true,true,true,true,true}; 
     // минимальные значения температур
     const int16_t MINTEMP[TNUMBER]={-4500,-3000,-1500,-1000,-2000,-2000,0,-500,-1510,100,600,400,0,0};
     // Макимальные значения температур
     const int16_t MAXTEMP[TNUMBER]={4000,3500,2500,4000,7000,6500,5000,4200,3010,8500,3200,3200,6300,6500};
     // Значения датчиков при тестировании  опция TEST В СОТЫХ ГРАДУСА
     const int16_t TESTTEMP[TNUMBER]={1000,2000,300,400,1000,3000,765,123,-500,500,0,0,2000,2000};

    // АНАЛОГОВЫЕ ДАТЧИКИ максимум 2 шт -------------------------------------------------------------------
    // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
    /* Справочно нумерация датчиков
    * Давление харится в сотых бара
    * #define PEVA        0                // Датчик давления испарителя.
    * #define PCON        1                // Датчик давления нагнетания.
    */
    const boolean SENSORPRESS[ANUMBER]={false,false};    
    const int16_t MINPRESS[ANUMBER]={400,100};        // минимальные значения давления
    const uint16_t MAXPRESS[ANUMBER]={1500,3000};     // Макимальные значения давления
    const uint16_t TESTPRESS[ANUMBER]={600,700};      // Значения датчиков при тестировании  опция TEST
    
      // ------------------- EEV -----------------------------------
      // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
  //   #define EEV_DEF                     // Наличие ЭРВ в конфигурации
      #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
          //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
          //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
          #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
          #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
          #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
          #define EEV_STEPS         490            // Число шагов ЭРВ 480
          #define EEV_PSTART        220            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
          #define EEV_START         150            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
          #define EEV_MIN_STEPS     2              // Минимальное число шагов открытия ЭРВ
          #define EEV_HOLD_MOTOR    false          // Режим "удержания" шагового двигателя ЭРВ
          #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
          // ЭРВ Времена и задержки
          #define DELAY_ON_PID_EEV  90             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
          #define DELAY_ON3_EEV     5              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
          #define DELAY_START_POS   30             // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
          #define DELAY_OFF_EEV     10             // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
       #endif   

      // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
      const boolean DEVICEFC=false;  // Наличие Частотного преобразователя в конфигурации
      // Константы частотного преобразователя для конкртеной  реализации
      #define FC_USE_RCOMP                     // Использовать для пуска/остановки инвертора отдельный выход RCOMP (команда по модбасу не посылается)
      #define FC_UPTIME         (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления
      
      #define FC_PID_FREQ_STEP    (2*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
      #define FC_PID_STOP          95          // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом

      #define FC_DT_COMP_TEMP   (5*100)        // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
      #define FC_DP_CON_PRESS   50             // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

      #define FC_START_FREQ       (60*100)       // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц
      #define FC_START_FREQ_BOILER (50*100)      // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц ГВС
      
      #define FC_MIN_FREQ         (40*100)       // Минимальная  частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MIN_FREQ_COOL    (60*100)       // Минимальная  частота инвертора при охлаждении в 0.01 Гц
      #define FC_MIN_FREQ_BOILER  (45*100)       // Минимальная  частота инвертора при нагреве ГВС в 0.01 Гц
      #define FC_MIN_FREQ_USER    (35*100)       // Минимальная  частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
       
      #define FC_MAX_FREQ         (110*100)      // Максимальная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MAX_FREQ_COOL    (100*100)      // Максимальная частота инвертора в режиме охлаждения  в 0.01 Гц
      #define FC_MAX_FREQ_BOILER  (60*100)       // Максимальная частота инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
       #define FC_MAX_FREQ_USER   (190*100)      // Максимальная частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
                
      #define FC_STEP_FREQ        (1*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 Гц
      #define FC_STEP_FREQ_BOILER (2*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 Гц
      
      #define FC_DT_TEMP        (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
      #define FC_DT_TEMP_BOILER (2*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса
       
      #define FC_MAX_POWER      (2.0*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
      #define FC_MAX_POWER_BOILER (1.0*10)     // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт
    
      #define FC_MAX_CURRENT    (10.0*100)     // Максимальный ток инвертора (см компрессор) в 0.01 А
      #define FC_MAX_CURRENT_BOILER (10.0*100) // Максимальный ток инвертора для ГВС в 0.01 А
   
      //#define FC_FULL_INIT                     // Полная инициализация инвертора при страте контроллера (записываются регистры нужные значеня) МОЖНО закоментировать
      // Для FC_FULL_INIT что прописывается в ПЧ
      #define FC_BASE_FREQ        (120*100)       // Основная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_ACCEL_TIME     (60*100)        // Время разгона (см компрессор) в 0.01 сек
      #define FC_DEACCEL_TIME   (90*100)        // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении

      // Временные задержки
    #define DELAY_ON_PUMP     60             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    60             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС

#endif

// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   2 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
#ifdef CONFIG_2    // Имя и описание конфигурации и ОСОБЕННОСТИ конфигурации ---------------------------------------------------------
    #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "Sheeny"          
    #define CONFIG_NOTE   "Воздушный Старт стоп  с шаговым ЭРВ, РТО и датчиком давления испарителя"
    #define HP_SCHEME       1                                              // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
    #define DEFROST        // нужна разморозка
    #define RHEAT_POWER   2000                                            // Мощность электрокотла
    #define ONEWIRE_DS2482                                                // + Использование мастера i2c Onewire DS2482
    #define NO_SD_CONTROL                                                 // + Использование выхода для контроля вставленной SD карты
    #define POWER_CONTROL                                                 // + Использование выхода для управления питанием платы (можно сбросить все кроме контроллера)
    #define SPI_FLASH                                                     // + Наличие чипа флеш памяти на шине SPI
    #define DRV_EEV_L9333                                                 // + Драйвера ЭРВ L9333  диагностика
    #define KEY_ON_OFF                                                    // + KEY1 Наличие кнопки включения и переключения в safeNetwork (нажата при сбросе)
    #define VCC_CONTROL                                                   // + Контроль за питанием контрола (прямое чтение) смотреть ADC_VCC и K_VCC_POWER
    #define EXTERNEL_AREF                                                 // + Использование внешней опоры для АЦП (ADR4525ARZ) требует доработки DUE и поддержки платы
    #define I2C_EEPROM_64KB                                               // + Использование памяти I2C для записи журнала
    #define I2C_FRAM_MEMORY       0                                       // + Тип используемой памяти 0 - Флеш 1 (обычно) - FRAM память (vad711)

   // #define RELAY_INVERT                                                    // инвертирование реле выходов реле
      #ifdef EXTERNAL_AREF                     // Какая опора для АЦП используется
         #define SAM3X_ADC_REF  2.5006         // Используется внешняя опора ADR4525ARZ плата pav2000 (UT71E результататы ЗИП 2.4997 ТН 2.5006)
      #else
         #define SAM3X_ADC_REF  3.30           // Штатное подключение используется питание DUE
      #endif
    // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
    const IPAddress defaultIP(192, 168, 0, 170);
    const IPAddress defaultSDNS(192, 168, 0, 191);
    const IPAddress defaultGateway(192, 168, 0, 1);
    const IPAddress defaultSubnet(255, 255, 255, 0);
    const boolean  defaultDHCP=false;
    // --------------------------------------------------------------------------------
    // ЖЕЛЕЗО  - привязка к ногам контроллера  В зависимости от конкретной схемы и платы
    // Для каждой конфигурации теперь свои определения!!!
    // --------------------------------------------------------------------------------
    // SPI шина управление отдельными устройствами до 3-х устройств (активный уровень низкий)
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
    #define PIN_SPI_CS_FLASH   52       // ++ FLASH-CS сигнал CS управление чипом флеш памяти (32 мБит)

    // Сервис
    #define PIN_ETH_RES         8       // ++ ETH-RES Сброс сетевого чипа w5500 активный low нормально high
    #define PIN_ETH_INT         9       // ++ ETH-INT Прерывание с w5500 пока не используется надо програмиировать на вход
    #define PIN_ETH_CS         10       // ++ ETH-CS Чип селект SPI w5500
    #define PIN_LED1           38       // ++ LED1 Первый красный светодиод для контроля (питание и фатальная ошибка freeRTOS)
    #define PIN_LED_OK         39       // ++ LED2 Второй зеленый светодиод Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_KEY1           40       // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
    #define PIN_KEY2           41       // +  KEY2 Вторая кнопка
    #define PIN_KEY3           42       // +  KEY3 Третья кнопка
    #define PIN_BEEP           43       // ++ SOUND Выход на пищалку  88- нога не использующиеся
    #define PIN_STEP_DIAG      44       // ++ STEP-DIAG Контроль драйвера шаговика
    #define PIN_NO_SD_CARD     45       // ++ CD Отсутствие карты в слоте
    #define PIN_POWER_ON       50       // ++ PWR-OFF Включение питания на всю плату (включение LOW)
    #define PIN_ADC_VCC        3        // ++ Нога АЦП куда заводится через делитель напряжение питания (в нумерации sam3x!) в ардуино это А4, коэффициент пересчета K_VCC_POWER

     // EEV куда подключено
    #define PIN_EEV1_D24       24       // ++ первая нога ЭРВ D24
    #define PIN_EEV2_D25       25       // ++ вторая нога ЭРВ D25
    #define PIN_EEV3_D26       26       // ++ третья нога ЭРВ D26
    #define PIN_EEV4_D27       27       // ++ четвертая нога ЭРВ D27

    //Частотный преобразователь
    #define PIN_DEVICE_FC         DAC0  // ++ DAC
    #define PIN_MODBUS_RSE        22    // +  RS485DE  Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)
    
    // датчики
    #define PIN_ONE_WIRE_BUS   23       // ++ 1-W-1 нога с интерфейсом OneWire ВСЕ температурные датчики
    #define ADC_SENSOR_PEVA    11       // + НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    10       // - НОМЕР канала ацп (в нумерации sam3x!) нога куда прицеплен датчик давления PCON
    
        // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER            3        // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_SLOWP   36       // ++ DIN1 Датчик низкого давления
    #define PIN_SENSOR_SHIGHP  37       // ++ DIN2 Датчик высокого давления
    #define PIN_SENSOR_SFROZEN 35       // - DIN3 Датчик заморозки
    #define PIN_SENSOR_SFLOWCON 32      // - DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_SFLOWEVE 33      // - DIN5 Датчик потока по испарителю
    #define PIN_SENSOR_SEVA    28       // - DIN6 Датчик протока по испарителю
    
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define SLOWP       0               // Датчик низкого давления
     #define SHIGHP      1               // Датчик высокого давления
     #define SFROZEN     2               // Датчик заморозки
//     #define SFLOWCON    3               // Датчик потока по кондесатору
//     #define SFLOWEVE    4               // Датчик потока по испарителю
//     #define SEVA        5              // Датчик протока по испарителю
      #define SFROZEN_OFF  false          // Состояние датчика при котором разморозка не нужна
      // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = {  PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                           PIN_SENSOR_SHIGHP,          // ++ DIN2 Датчик высокого давления
                                           PIN_SENSOR_SFROZEN        // - DIN3 Датчик заморозки
   //                                        PIN_SENSOR_SFLOWCON,       // - DIN4 Датчик потока по кондесатору
  //                                         PIN_SENSOR_SFLOWEVE,       // - DIN5 Датчик потока по испарителю
  //                                         PIN_SENSOR_SEVA            // - DIN6 Датчик протока по испарителю
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { "Датчик низкого давления",       // аварийный
                                         "Датчик высокого давления",       // аварийный
                                       "Датчик разморозки испарителя"  // рабочий
  //                                     "Датчик потока по кондесатору",  // импульсный
  //                                     "Датчик потока по испарителю",   // импульсный
  //                                     "Датчик протока по испарителю"   // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {"SLOWP",           // Датчик низкого давления
                                        "SHIGHP",           // Датчик высокого давления
                                        "SZROZEN"          // Датчик разморозки
 //                                       "SFLOWCON",        // Датчик потока по кондесатору
 //                                       "SFLOWCON",        // Датчик потока по кондесатору
 //                                       "SEVA"            // Датчик протока по испарителю
                                 };          
              
     
      const bool TESTINPUT[INUMBER]={true,true,false};              // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={false,false,true};            // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ
      const TYPE_SENSOR SENSORTYPE[INUMBER]={pALARM,pALARM,pSENSOR};// тип контактного датчика
    
// ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            1       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   35     // - DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   36     // - DIN5 Датчик потока по испарителю
 //   #define PIN_SENSOR_FLOWPCON  32     // - DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define FLOWCON        0        // Датчик потока по кондесатору
     #define FLOWEVA        1        // Датчик потока по испарителю
     #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
     const uint8_t pinsFrequency[FNUMBER] = {PIN_SENSOR_FLOWCON,       // - DIN4 Датчик потока по кондесатору
//                                             PIN_SENSOR_FLOWEVA        // - DIN5 Датчик потока по испарителю
//                                             PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                             };
      // Описание датчиков
      const char *noteFrequency[FNUMBER] = { "Датчик потока по кондесатору",       // - DIN4 Датчик потока по кондесатору
 //                                            "Датчик потока по испарителю"        // - DIN5 Датчик потока по испарителю
//                                             "Датчик протока по предконденсатору"  // - DIN6 Датчик протока по предконденсатору
                                           };
      // Имена датчиков
      const char *nameFrequency[FNUMBER] = { "FLOWCON",                      // Датчик потока по кондесатору
 //                                            "FLOWEVE"                       // Датчик потока по кондесатору
 //                                            "FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
              
      const float TRANSFLOW[FNUMBER]={0.43};                         // Коэффициент преобразования частота - поток
      const uint16_t TESTFLOW[FNUMBER]={700};                        // Значения датчиков при тестировании  опция TEST
      const uint16_t MINFLOW[FNUMBER]= {200};                        // МИНИМАЛЬНЫЕ Значения датчиков
           
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
    // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define RNUMBER            8       // Число исполнительных устройств (всех)
     // устройства 220 вольт
    #define PIN_DEVICE_RCOMP   28       // ++ PWR_ON1 Реле включения компрессора (через пускатель)
    //#define PIN_DEVICE_RPUMPI  29       // ++ PWR_ON2 Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RPUMPO  30       // ++ PWR_ON3 Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_RBOILER 31       // ++ PWR_ON4 Включение ТЭНа бойлера
    #define PIN_DEVICE_RTRV    7        // ++ PWR_ON5 4-ходовой клапан
    #define PIN_DEVICE_RFAN1   11       // - Реле включения вентилятора испарителя №1
    #define PIN_DEVICE_RFAN2   12       // - Реле включения вентилятора испарителя №2
    #define PIN_DEVICE_R3WAY   29       // + Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
//    #define PIN_DEVICE_REVI    51       // + Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define PIN_DEVICE_RHEAT   13       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //   #define PIN_DEVICE_RPUMPB  53       // + Реле насоса циркуляции бойлера (ГВС)

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
 //   #define RPUMPI             1          // Реле включения насоса входного контура  (геоконтур)
    #define RPUMPO             1          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define RBOILER            2          // Включение ТЭНа бойлера
    #define RTRV               3          // 4-ходовой клапан (охлаждение)
    #define RFAN1              4          // Реле включения вентилятора испарителя №1
    #define RFAN2              5          // Реле включения вентилятора испарителя №2
//    #define REVI               7          // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define R3WAY              6          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define RHEAT              7          // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //   #define RPUMPB            10          // Реле насоса циркуляции бойлера (ГВС)
     
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ PWR_ON1 Реле включения компрессора (через пускатель)
  //                                      PIN_DEVICE_RPUMPI,      // ++ PWR_ON2 Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RPUMPO,      // ++ PWR_ON3 Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_RBOILER,     // ++ PWR_ON4 Включение ТЭНа бойлера
                                        PIN_DEVICE_RTRV,        // ++ PWR_ON5 4-ходовой клапан
                                        PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
                                        PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
 //                                       PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                        PIN_DEVICE_R3WAY,       // ++ PWR_ON6 Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
                                        PIN_DEVICE_RHEAT       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //                                       PIN_DEVICE_RPUMPB,       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора (через пускатель)",
 //                                    "Реле включения насоса входного контура  (геоконтур)",
                                     "Реле включения насоса выходного контура (отопление и ГВС)",
                                     "Реле включение ТЭНа бойлера (ГВС)",
                                     "4-ходовой клапан (для режима охлаждения надо включить)",
                                     "Реле включения вентилятора испарителя №1",
                                     "Реле включения вентилятора испарителя №2",
 //                                    "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
                                     "Трех ходовой кран, переключение ТН между отоплением и ГВС ",
                                     "Реле включение ТЭНа системы отопления (электрокотел)"
 //                                    "Реле насоса циркуляции бойлера (ГВС)"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора (через пускатель)
 //                                    "RPUMPI",         // Реле включения насоса входного контура  (геоконтур)
                                     "RPUMPO",         // Реле включения насоса выхордного контура  (отопление и ГВС)
                                     "RBOILER",        // Реле включение ТЭНа бойлера (ГВС)
                                     "RTRV",           // 4-ходовой клапан инвертирован
                                     "RFAN1",          // Реле включения вентилятора испарителя №1
                                     "RFAN2",          // Реле включения вентилятора испарителя №2
 //                                    "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                     "R3WAY",          // Трех ходовой кран, переключение ТН между отоплением и ГВС
                                     "RHEAT"          // Реле насоса циркуляции бойлера (ГВС)
 //                                    "RPUMPB"         // Выход для управления пуском инвертора
                                     } ;  
    
    // Конфигурация системы отопления --------------------------------------------------------------------------------
    // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
    // Могут быть задействованы разные датчики!
    #define FEED      sTemp[TCONOUTG].get_Temp()              // Подача системы СО- выход по гликолю кондесатора
    #define RET       sTemp[TCONING].get_Temp()               // Обратка системы СО- вход по гликолю кондесатора
    // Определение насосов конденсатора и испарителя по именам
    #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
    #define PUMP_IN       RFAN1                                // Насос входного  контура (гео или воздушник)
    #define TWO_PUMP_IN                                        // Признак использования второго вентилятора для испарителя
    #define PUMP_IN1      RFAN2                                // ВТОРОЙ Насос входного  контура (гео или воздушник) рабоатет с TWO_PUMP_IN

    // ДАТЧИКИ ТЕМПЕРАТУРЫ до 14 шт. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
    // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
    /* Справочно нумерация датчиков
     * Температура хранится в сотых градуса
     * #define TOUT        0                // Температура улицы
     * #define TIN         1                // Температура в доме
     * #define TEVAIN      2                // Температура на входе испарителя (по фреону)
     * #define TEVAOUT     3                // Температура на выходе испарителя (по фреону)
     * #define TCONIN      4                // Температура на входе конденсатора (по фреону)
     * #define TCONOUT     5                // Температура на выходе конденсатора (по фреону)
     * #define TBOILER     6                // Температура в бойлере ГВС
     * #define TACCUM      7                // Температура на выходе теплоаккмулятора
     * #define TRTOOUT     8                // Температура на выходе RTO (по фреону)
     * #define TCOMP       9                // Температура нагнетания компрессора
     * #define TEVAING     10               // Температура на входе испарителя (по гликолю)
     * #define TEVAOUTG    11               // Температура на выходе испарителя (по гликолю)
     * #define TCONING     12               // Температура на входе конденсатора (по гликолю)
     * #define TCONOUTG    13               // Температура на выходе конденсатора (по гликолю)
     */
      const boolean SENSORTEMP[TNUMBER]={true,true,true,true,true,true,true,true,true,true,false,false,true,true}; 
      // минимальные значения температур
      const int16_t MINTEMP[TNUMBER]={-3500,-3000,-1500,-1000,-2000,-2000,0,-500,-3000,100,300,300,1000,1500};
     // Макимальные значения температур
     const int16_t MAXTEMP[TNUMBER]={4000,3500,2100,2100,7000,6500,6000,5000,1200,7500,3000,3000,4000,5000}; // нормальный конфиг
     //    const int16_t MAXTEMP[TNUMBER]={4000,3500,3000,3000,7000,6500,6000,5000,3000,7500,3000,3000,4000,5000};   // для проверки
     // Значения датчиков при тестировании  опция TEST В СОТЫХ ГРАДУСА
     const int16_t TESTTEMP[TNUMBER]={1000,2000,300,400,1000,3000,-700,-1234,-500,500,0,0,2000,2000};
    // АНАЛОГОВЫЕ ДАТЧИКИ максимум 2 шт -------------------------------------------------------------------
    // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
    /* Справочно нумерация датчиков
     * Давление харится в сотых бара
     * #define PEVA        0                // Датчик давления испарителя.
     * #define PCON        1                // Датчик давления нагнетания.
     */
     const boolean SENSORPRESS[ANUMBER]={true,false}; 
     const int16_t MINPRESS[ANUMBER]={-10,0};          // минимальные значения давления
     const uint16_t MAXPRESS[ANUMBER]={1500,3000};     // Макимальные значения давления
     const uint16_t TESTPRESS[ANUMBER]={400,700};      // Значения датчиков при тестировании  опция TEST

      // ------------------- EEV -----------------------------------
      // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
      #define EEV_DEF                     // Наличие ЭРВ в конфигурации
      #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
          //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
          //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
          #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
          #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
          #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
          #define EEV_STEPS         490            // Число шагов ЭРВ 480
          #define EEV_PSTART        220            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
          #define EEV_START         150            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
          #define EEV_MIN_STEPS     2              // Минимальное число шагов открытия ЭРВ
          #define EEV_HOLD_MOTOR    false          // Режим "удержания" шагового двигателя ЭРВ
          #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
          // ЭРВ Времена и задержки
          #define DELAY_ON_PID_EEV  90             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
          #define DELAY_ON3_EEV     5              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
          #define DELAY_START_POS   30             // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
          #define DELAY_OFF_EEV     10             // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
       #endif   

      // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
      const boolean DEVICEFC=false;  // Наличие Частотного преобразователя в конфигурации
      // Константы частотного преобразователя для конкртеной  реализации
      #define FC_USE_RCOMP                     // Использовать для пуска/остановки инвертора отдельный выход RCOMP (команда по модбасу не посылается)
      #define FC_UPTIME         (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления
      
      #define FC_PID_FREQ_STEP    (2*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
      #define FC_PID_STOP          95          // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом

      #define FC_DT_COMP_TEMP   (5*100)        // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
      #define FC_DP_CON_PRESS   50             // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

      #define FC_START_FREQ       (60*100)       // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц
      #define FC_START_FREQ_BOILER (50*100)      // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц ГВС
      
      #define FC_MIN_FREQ         (40*100)       // Минимальная  частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MIN_FREQ_COOL    (60*100)       // Минимальная  частота инвертора при охлаждении в 0.01 Гц
      #define FC_MIN_FREQ_BOILER  (45*100)       // Минимальная  частота инвертора при нагреве ГВС в 0.01 Гц
      #define FC_MIN_FREQ_USER    (35*100)       // Минимальная  частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
      
      #define FC_MAX_FREQ         (110*100)      // Максимальная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MAX_FREQ_COOL    (100*100)      // Максимальная частота инвертора в режиме охлаждения  в 0.01 Гц
      #define FC_MAX_FREQ_BOILER  (60*100)       // Максимальная частота инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
      #define FC_MAX_FREQ_USER    (190*100)      // Максимальная частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
                
      #define FC_STEP_FREQ        (1*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 Гц
      #define FC_STEP_FREQ_BOILER (2*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 Гц
      
      #define FC_DT_TEMP        (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
      #define FC_DT_TEMP_BOILER (2*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса
       
      #define FC_MAX_POWER      (2.0*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
      #define FC_MAX_POWER_BOILER (1.0*10)     // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт
    
      #define FC_MAX_CURRENT    (10.0*100)     // Максимальный ток инвертора (см компрессор) в 0.01 А
      #define FC_MAX_CURRENT_BOILER (10.0*100) // Максимальный ток инвертора для ГВС в 0.01 А
   
      //#define FC_FULL_INIT                     // Полная инициализация инвертора при страте контроллера (записываются регистры нужные значеня) МОЖНО закоментировать
      // Для FC_FULL_INIT что прописывается в ПЧ
      #define FC_BASE_FREQ        (120*100)       // Основная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_ACCEL_TIME     (60*100)        // Время разгона (см компрессор) в 0.01 сек
      #define FC_DEACCEL_TIME   (90*100)        // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении

      // Временные задержки
    #define DELAY_ON_PUMP     60             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    60             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС

#endif  // конец  конфига 2

// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   3 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
//###################################################################################################################################################################################################################
#ifdef CONFIG_3    // Имя, описание и ОСОБЕННОСТИ конфигурации конфигурации ---------------------------------------------------------
    #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "dimex"          
    #define CONFIG_NOTE   "Инвертор с компрессором BLDC с шаговым ЭРВ и РТО"
    #define HP_SCHEME       1            // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
    #define SUPERBOILER               // Использование предкондесатора для нагрева ГВС
    #define SUPERBOILER_FC (35*100)   // частота супербойлера для частотника
    #define SUPERBOILER_DT (10*100)   // разница температур компресссора и бойлера для включения насоса
    #define I2C_EEPROM_64KB           // + Использование памяти I2C для записи журнала.При коментарии используется оперативка
    #define I2C_FRAM_MEMORY       0   // + Тип используемой памяти 0 - Флеш 1 (обычно) - FRAM память (vad711)
    #define SPI_FLASH      // + Наличие чипа флеш памяти на шине SPI
    #define RELAY_INVERT   // инвертирование выходов реле
    #define USE_ELECTROMETER_SDM     // + Наличие счетчика SDM220 в конфигурации
    #ifdef EXTERNAL_AREF                     // Какая опора для АЦП используется
         #define SAM3X_ADC_REF  2.5006         // Используется внешняя опора ADR4525ARZ плата pav2000 (UT71E результататы ЗИП 2.4997 ТН 2.5006)
    #else
         #define SAM3X_ADC_REF  3.30           // Штатное подключение используется питание DUE
    #endif
    // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
    const IPAddress defaultIP(192, 168, 0, 170);
    const IPAddress defaultSDNS(192, 168, 0, 191);
    const IPAddress defaultGateway(192, 168, 0, 1);
    const IPAddress defaultSubnet(255, 255, 255, 0);
    const boolean  defaultDHCP=false;
//###################################################################################################################################################################################################################
    // SPI шина управление отдельными устройствами до 3-х устройств (активный уровень низкий)
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом w5500
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
    #define PIN_SPI_CS_FLASH   52       // ++ FLASH-CS сигнал CS управление чипом флеш памяти (32 мБит)
//###################################################################################################################################################################################################################
    // Сервис
    #define PIN_ETH_RES         8         // ++ ETH-RES Сброс сетевого чипа w5500 активный low нормально high
    #define PIN_ETH_INT         9         // ++ ETH-INT Прерывание с w5500 пока не используется надо програмиировать на вход
    #define PIN_ETH_CS         10         // ++ ETH-CS Чип селект SPI w5500
    #define PIN_LED1           42         // ++ LED1 Первый красный светодиод для контроля (питание и фатальная ошибка freeRTOS)
    #define PIN_LED_OK         43         // ++ LED2 Второй зеленый светодиод Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_KEY1           44         // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
    #define PIN_BEEP           45         // ++  SOUND Выход на пищалку  88- нога не использующиеся
//###################################################################################################################################################################################################################  
    // EEV куда подключено общий СИНИЙ
    #define PIN_EEV1_D24       29          // ++ первая нога ЭРВ D24  ОРАНЖЕВЫЙ  +А
    #define PIN_EEV2_D25       30          // ++ вторая нога ЭРВ D25  КРАСНЫЙ    +B
    #define PIN_EEV3_D26       31          // ++ третья нога ЭРВ D26  ЖЕЛТЫЙ     -A
    #define PIN_EEV4_D27       32          // ++ четвертая нога ЭРВ D27 ЧЕРНЫЙ   -B
    
   // ЭРВ 1 (основной испаритель, гео/dx) - требуется четыре провода  Общий синий
   // #define PIN_DEVICE_EEV_ORANGE 29    // + Фаза А    оранжевый
   // #define PIN_DEVICE_EEV_YELLOW 30    // + Фаза ~А   желтый
   // #define PIN_DEVICE_EEV_RED    31    // + Фаза B    красный
   // #define PIN_DEVICE_EEV_BLACK  32    // + Фаза ~B   Черный
    
   // ЭРВ 2 (дополнительный испаритель, воздушка) - требуется четыре провода  Общий синий (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_ORANGE 24    // + Фаза А    оранжевый (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_YELLOW 25    // + Фаза ~А   желтый    (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_RED    26    // + Фаза B    красный   (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_BLACK  27    // + Фаза ~B   Черный    (пока не поддерживается прошивкой)
    
   // #define PIN_DEVICE_12V1  28  // 12в силовой выход с ULN2003 (3 выхода в параллель) (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_12V2  33  // 12в силовой выход с ULN2003 одинарный  (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_12V3  34  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_12V4  35  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
    
    // выходы 0-10в
    #define PIN_DEVICE_FC         DAC0  // ++ DAC0  //Частотный преобразователь, выход 0-10в
   // #define PIN_DEVICE_FC2      DAC1  // ++ DAC1   //Частотный преобразователь2, выход 0-10в (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_PWM1         2  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_PWM1         5  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_PWM1         6  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_PWM1         7  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   
    #define PIN_MODBUS_RSE        22     //++   Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)
//###################################################################################################################################################################################################################    
    // датчики
    #define PIN_ONE_WIRE_BUS   23       // ++ нога с интерфейсом OneWire ВСЕ температурные датчики
    #define ADC_SENSOR_PEVA    13       // ++ НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    12       // ++ НОМЕР канала ацп (в нумерации sam3x!) нога куда прицеплен датчик давления PCON
//###################################################################################################################################################################################################################
    // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER            1       // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
    //#define PIN_SENSOR_SLOWP     36       // ++ DIN1 Датчик низкого давления
    //#define PIN_SENSOR_SHIGHP    37       // ++ DIN2 Датчик высокого давления
    #define PIN_SENSOR_SERRFC      38       // ++ DIN3 Сигнал ошибка инвертора
    //#define PIN_SENSOR_SFLOWCON  39       // ++ DIN4 Датчик потока по кондесатору
    //#define PIN_SENSOR_SFLOWEVA  40       // ++ DIN5 Датчик потока по испарителю
    //#define PIN_SENSOR_SEVA      41       // ++ DIN6 Датчик протока по испарителю
    
    // Имена индексов ВАЖЕН ПОРЯДОК!
   //#define SLOWP             0        // Датчик низкого давления
   //#define SHIGHP            1        // Датчик высокого давления
     #define SERRFC            2        // Сигнал ошибка инвертора

        // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = { // PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                          // PIN_SENSOR_SHIGHP,         // ++ DIN2 Датчик высокого давления
                                           PIN_SENSOR_SERRFC           // ++ DIN3 Сигнал ошибка инвертора
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { //"Датчик низкого давления",       // аварийный
                                         //"Датчик высокого давления",      // аварийный
                                         "Сигнал ошибки Omron MX2"          // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {//"SLOWP",            // Датчик низкого давления
                                        //"SHIGHP",           // Датчик высокого давления
                                        "SERRFC"             // Сигнал ошибка инвертора
                                       };          
              
     
      const bool TESTINPUT[INUMBER]={true};                // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={false};              // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ (актуально только для pALARM )
      const TYPE_SENSOR SENSORTYPE[INUMBER]={pALARM};      // тип контактного датчика  pALARM, pSENSOR,  pPULSE
//###################################################################################################################################################################################################################
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            3       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   39     // ++ DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   40     // ++ DIN5 Датчик потока по испарителю
    #define PIN_SENSOR_FLOWPCON  41     // ++ DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define FLOWCON        0        // Датчик потока по кондесатору
     #define FLOWEVA        1        // Датчик потока по испарителю
     #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
     const uint8_t pinsFrequency[FNUMBER] = {PIN_SENSOR_FLOWCON,       // - DIN4 Датчик потока по кондесатору
                                             PIN_SENSOR_FLOWEVA,        // - DIN5 Датчик потока по испарителю
                                             PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                             };
      // Описание датчиков
      const char *noteFrequency[FNUMBER] = { "Датчик потока по кондесатору (кубы/час)",       // - DIN4 Датчик потока по кондесатору
                                             "Датчик потока по испарителю (кубы/час)",        // - DIN5 Датчик потока по испарителю
                                             "Датчик протока по предконденсатору (кубы/час)"  // - DIN6 Датчик протока по предконденсатору
                                           };
      // Имена датчиков
      const char *nameFrequency[FNUMBER] = { "FLOWCON",                      // Датчик потока по кондесатору
                                             "FLOWEVA",                       // Датчик потока по кондесатору
                                             "FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
              
      const float TRANSFLOW[FNUMBER]={0.43,0.43,0.43};                         // Коэффициент преобразования частота - поток
      const uint16_t TESTFLOW[FNUMBER]={700,2100,2100};                        // Значения датчиков при тестировании  опция TEST
      const uint16_t MINFLOW[FNUMBER]= {201,1001,1001};                        // МИНИМАЛЬНЫЕ Значения датчиков

//###################################################################################################################################################################################################################
   // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define RNUMBER            9        // Число исполнительных устройств (всех)
     // устройства 220 вольт
    #define PIN_DEVICE_RCOMP           35       // ++ Реле включения компрессора (через пускатель)
    #define PIN_DEVICE_RPUMPO          47       // ++ Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_R3WAY           48       // ++ 3-ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define PIN_DEVICE_RTRV            51       // ++ 4-ходовой клапан
    #define PIN_OMRON_RESET            33       // ++ DOUT2 Выход для сброса инвертора
    #define PIN_DEVICE_RPUMPI          50       // ++ Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RBOILER         34       // ++ Включение ТЭНа бойлера
    #define PIN_DEVICE_RSUPERBOILER    53       // ++ реле насоса супербойлера
    #define PIN_DEVICE_RPUMPB          49       // ++ реле насоса насос
//###################################################################################################################################################################################################################   
    
 //   #define PIN_DEVICE_RFAN1         11       // ++ Реле включения вентилятора испарителя №1
 //   #define PIN_DEVICE_RFAN2         11       // ++ Реле включения вентилятора испарителя №2
 //   #define PIN_DEVICE_REVI          11       // ++ Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
 //   #define PIN_DEVICE_RHEAT         12       // ++ Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //   #define PIN_DEVICE_RPUMPB        13       // ++ Реле насоса циркуляции бойлера (ГВС)

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
    #define RPUMPO             1          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define R3WAY              2          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define RRESET             3          // Выход для сброса инвертора
    #define RPUMPI             4          // Реле включения насоса входного контура  (геоконтур)
    #define RBOILER            5          // Включение ТЭНа бойлера
    #define RSUPERBOILER       6          // реле насоса супербойлера
    #define RTRV               7          // 4-ходовой клапан (охлаждение)
 //   #define RFAN1            99         // Реле включения вентилятора испарителя №1
 //   #define RFAN2            99         // Реле включения вентилятора испарителя №2
 //   #define REVI             99         // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
 //   #define RHEAT            99         // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
    #define RPUMPB             8          // Реле насоса циркуляции бойлера (ГВС)
//###################################################################################################################################################################################################################     
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ Реле включения компрессора (через пускатель)
                                        PIN_DEVICE_RPUMPO,      // ++ Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_R3WAY,       // ++ Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
                                        PIN_OMRON_RESET,        // ++ Выход для сброса инвертора
                                        PIN_DEVICE_RPUMPI,      // ++ Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RBOILER,     // ++ Включение ТЭНа бойлера
                                        PIN_DEVICE_RSUPERBOILER,
                                        PIN_DEVICE_RTRV,
                                        // ++ реле насоса супербойлера
  //                                    PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
  //                                    PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
  //                                    PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
  //                                    PIN_DEVICE_RHEAT,       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
                                        PIN_DEVICE_RPUMPB       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
                                        
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора",
                                     "Реле включения насоса отопления",
                                     "Трех ходовой кран, переключение ТН между отоплением и ГВС ",
                                     "Реле сброса ошибки инвертора",
                                     "Реле включения насоса геоконтура",
                                     "Реле включение ТЭНа бойлера",
                                     "Реле насоса супербойлера",
                                     "4-х ходовой",
  //                                   "Реле включения вентилятора испарителя №1",
  //                                   "Реле включения вентилятора испарителя №2",
  //                                   "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
    //                                 "Реле включение ТЭНа системы отопления (электрокотел)",
                                     "Реле насоса циркуляции бойлера (ГВС)"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора
                                     "RPUMPO",         // Реле включения насоса отопления
                                     "R3WAY",          // Трех ходовой кран, переключение ТН между отоплением и ГВС,
                                     "RRESET",
                                     "RPUMPI",         // Реле включения насоса геоконтура
                                     "RBOILER",        // Реле включение ТЭНа бойлера
                                     "RSUPERBOILER",  // + реле насоса супербойлера
                                     "RTRV",           // 4-ходовой клапан инвертирован
  //                                   "RFAN1",          // Реле включения вентилятора испарителя №1
  //                                   "RFAN2",          // Реле включения вентилятора испарителя №2
  //                                   "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
       //                              "RHEAT",          // Реле насоса циркуляции бойлера (ГВС)
                                     "RPUMPB"         // Выход для управления пуском инвертора
                                      
                                     } ;     
   
   // Конфигурация системы отопления --------------------------------------------------------------------------------
   // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
   // Могут быть задействованы разные датчики!
    #define FEED      sTemp[TCONOUTG].get_Temp()                // Подача системы - вход по фреону кондесатора
    #define RET       sTemp[TCONING].get_Temp()                 // Обратка системы - выход по фреону кондесатора

//###################################################################################################################################################################################################################
     // Определение насосов конденсатора и испарителя по именам
     #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
     #define PUMP_IN       RPUMPI                               // Насос входного  контура (гео или воздушник)
//###################################################################################################################################################################################################################   
    // ДАТЧИКИ ТЕМПЕРАТУРЫ до 14 шт. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
    // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
    /* Справочно нумерация датчиков
     * Температура хранится в сотых градуса
     * #define TOUT        0                // Температура улицы
     * #define TIN         1                // Температура в доме
     * #define TEVAIN      2                // Температура на входе испарителя (по фреону)
     * #define TEVAOUT     3                // Температура на выходе испарителя (по фреону)
     * #define TCONIN      4                // Температура на входе конденсатора (по фреону)
     * #define TCONOUT     5                // Температура на выходе конденсатора (по фреону)
     * #define TBOILER     6                // Температура в бойлере ГВС
     * #define TACCUM      7                // Температура на выходе теплоаккмулятора
     * #define TRTOOUT     8                // Температура на выходе RTO (по фреону)
     * #define TCOMP       9                // Температура нагнетания компрессора
     * #define TEVAING     10               // Температура на входе испарителя (по гликолю)
     * #define TEVAOUTG    11               // Температура на выходе испарителя (по гликолю)
     * #define TCONING     12               // Температура на входе конденсатора (по гликолю)
     * #define TCONOUTG    13               // Температура на выходе конденсатора (по гликолю)
     */
       // Наличие датчика в конфигурации
              const boolean SENSORTEMP[TNUMBER]={true,true,true,true,false,true,true,false,true,true,true,true,true,true}; 
        // минимальные значения температур
       const int16_t MINTEMP[TNUMBER]={-4000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000};
       // Макимальные значения температур
       const int16_t MAXTEMP[TNUMBER]={9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500};
       // Значения датчиков при тестировании  опция TEST В СОТЫХ ГРАДУСА
       const int16_t TESTTEMP[TNUMBER]={1000,2000,300,400,1000,3000,-700,-1234,-500,500,0,0,2000,2000};
      // АНАЛОГОВЫЕ ДАТЧИКИ максимум 2 шт -------------------------------------------------------------------
      // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
      /* Справочно нумерация датчиков
       * Давление харится в сотых бара
       * #define PEVA        0                // Датчик давления испарителя.
       * #define PCON        1                // Датчик давления нагнетания.
       */
       const boolean SENSORPRESS[ANUMBER]={true,true}; 
       const int16_t MINPRESS[ANUMBER]={400,400};       // минимальные значения давления
       const uint16_t MAXPRESS[ANUMBER]={2000,3000};    // Максимальные значения давления
       const uint16_t TESTPRESS[ANUMBER]={750,1600};    // Значения датчиков при тестировании  опция TEST
//###################################################################################################################################################################################################################
      // ------------------- EEV -----------------------------------
      // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
      #define EEV_DEF                     // Наличие ЭРВ в конфигурации
      #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
          //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
          //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
          #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
          #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
          #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
          #define EEV_STEPS         480            // Число шагов ЭРВ 480
          #define EEV_PSTART        100            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
          #define EEV_START         100            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
          #define EEV_MIN_STEPS     2              // Минимальное число шагов открытия ЭРВ
          #define EEV_HOLD_MOTOR    false           // Режим "удержания" шагового двигателя ЭРВ
          #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
          // ЭРВ Времена и задержки
          #define DELAY_ON_PID_EEV  40             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
          #define DELAY_ON3_EEV     1              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
          #define DELAY_START_POS   1             // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
          #define DELAY_OFF_EEV     1             // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
       #endif   
//###################################################################################################################################################################################################################
      // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
      const boolean DEVICEFC=true;  // Наличие Частотного преобразователя в конфигурации
      // Константы частотного преобразователя для конкртеной  реализации
      #define FC_USE_RCOMP                        // Использовать для пуска/остановки инвертора отдельный выход RCOMP (команда по модбасу не посылается)
      #define FC_UPTIME            (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления
      
      #define FC_PID_FREQ_STEP       (1*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
      #define FC_PID_STOP           95            // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом

      #define FC_DT_COMP_TEMP       (5*100)       // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
      #define FC_DP_CON_PRESS       300           // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

      #define FC_START_FREQ           (35*100)       // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц
      #define FC_START_FREQ_BOILER    (35*100)       // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц ГВС
      
      #define FC_MIN_FREQ             (35*100)       // Минимальная  частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MIN_FREQ_COOL        (35*100)       // Минимальная  частота инвертора при охлаждении в 0.01 Гц
      #define FC_MIN_FREQ_BOILER      (35*100)       // Минимальная  частота инвертора при нагреве ГВС в 0.01 Гц
      #define FC_MIN_FREQ_USER        (35*100)       // Минимальная  частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
      
      #define FC_MAX_FREQ             (180*100)      // Максимальная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MAX_FREQ_COOL        (180*100)      // Максимальная частота инвертора в режиме охлаждения  в 0.01 Гц
      #define FC_MAX_FREQ_BOILER      (180*100)      // Максимальная частота инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
      #define FC_MAX_FREQ_USER        (180*100)      // Максимальная частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
                
      #define FC_STEP_FREQ            (3*100)       // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 Гц
      #define FC_STEP_FREQ_BOILER     (5*100)       // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 Гц
      
      #define FC_DT_TEMP            (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
      #define FC_DT_TEMP_BOILER     (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса
       
      #define FC_MAX_POWER          (2.0*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
      #define FC_MAX_POWER_BOILER   (2.0*10)       // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт
    
      #define FC_MAX_CURRENT        (9.0*100)      // Максимальный ток инвертора (см компрессор) в 0.01 А
      #define FC_MAX_CURRENT_BOILER (9.0*100)      // Максимальный ток инвертора для ГВС в 0.01 А
//###################################################################################################################################################################################################################   
      //#define FC_FULL_INIT                       // Полная инициализация инвертора при страте контроллера (записываются регистры нужные значеня) МОЖНО закоментировать
      // Для FC_FULL_INIT что прописывается в ПЧ
      //#define FC_BASE_FREQ        (240*100)          // Основная частота инвертора (см компрессор) в 0.01 Гц
      //#define FC_ACCEL_TIME     (60*100)           // Время разгона (см компрессор) в 0.01 сек
      //#define FC_DEACCEL_TIME   (60*100)           // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении

      // Временные задержки
    #define DELAY_ON_PUMP     60             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    60             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС

#endif    // CONFIG_3  

 

// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   4 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
#ifdef CONFIG_4    // Имя и описание конфигурации и ОСОБЕННОСТИ конфигурации ---------------------------------------------------------
    #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "dobrinia"          
    #define CONFIG_NOTE   "Инвертор с компрессором BLDC с шаговым ЭРВ и РТО"
    #define HP_SCHEME       1                                          // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
    #define SUPERBOILER               // Использование предкондесатора для нагрева ГВС
    #define SUPERBOILER_FC (90*100)   // частота супербойлера для частотника
    #define SUPERBOILER_DT (10*100)   // разница температур компресссора и бойлера для включения насоса
    #define SPI_FLASH                 // + Наличие чипа флеш памяти на шине SPI
    #define I2C_EEPROM_64KB           // + Использование памяти I2C для записи журнала при коментарии используется оперативка
    #define I2C_FRAM_MEMORY       0   // + Тип используемой памяти 0 - Флеш 1 (обычно) - FRAM память (vad711)
 // #define RELAY_INVERT              // инвертирование реле выходов реле
    #ifdef EXTERNAL_AREF                     // Какая опора для АЦП используется
         #define SAM3X_ADC_REF  2.5006         // Используется внешняя опора ADR4525ARZ плата pav2000 (UT71E результататы ЗИП 2.4997 ТН 2.5006)
    #else
         #define SAM3X_ADC_REF  3.30           // Штатное подключение используется питание DUE
    #endif
    // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
    const IPAddress defaultIP(192, 168, 0, 170);
    const IPAddress defaultSDNS(192, 168, 0, 191);
    const IPAddress defaultGateway(192, 168, 0, 1);
    const IPAddress defaultSubnet(255, 255, 255, 0);
    const boolean  defaultDHCP=false;
    // --------------------------------------------------------------------------------
    // ЖЕЛЕЗО  - привязка к ногам контроллера  В зависимости от конкретной схемы и платы
    // Для каждой конфигурации теперь свои определения!!!
    // --------------------------------------------------------------------------------
    // SPI шина управление отдельными устройствами до 3-х устройств (активный уровень низкий)
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом w5500
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
    #define PIN_SPI_CS_FLASH   33 //52  // ++ FLASH-CS сигнал CS управление чипом флеш памяти (32 мБит)

    // Сервис
    #define PIN_ETH_RES         8         // ++ ETH-RES Сброс сетевого чипа w5500 активный low нормально high
    #define PIN_ETH_INT         9         // ++ ETH-INT Прерывание с w5500 пока не используется надо програмиировать на вход
    #define PIN_ETH_CS         10         // ++ ETH-CS Чип селект SPI w5500
    #define PIN_LED1           42         // ++ LED1 Первый красный светодиод для контроля (питание и фатальная ошибка freeRTOS)
    #define PIN_LED_OK         43         // ++ LED2 Второй зеленый светодиод Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_KEY1           44         // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
    #define PIN_BEEP           45         // ++  SOUND Выход на пищалку  88- нога не использующиеся
     
    // EEV куда подключено общий СИНИЙ
    #define PIN_EEV1_D24       29          // ++ первая нога ЭРВ D24  ОРАНЖЕВЫЙ  +А
    #define PIN_EEV2_D25       30          // ++ вторая нога ЭРВ D25  КРАСНЫЙ    +B
    #define PIN_EEV3_D26       31          // ++ третья нога ЭРВ D26  ЖЕЛТЫЙ     -A
    #define PIN_EEV4_D27       32          // ++ четвертая нога ЭРВ D27 ЧЕРНЫЙ   -B
  
   // ЭРВ 2 (дополнительный испаритель, воздушка) - требуется четыре провода  Общий синий (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_ORANGE 24    // + Фаза А    оранжевый (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_YELLOW 25    // + Фаза ~А   желтый    (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_RED    26    // + Фаза B    красный   (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_BLACK  27    // + Фаза ~B   Черный    (пока не поддерживается прошивкой)
    
    //#define PIN_DEVICE_12V1  28  // 12в силовой выход с ULN2003 (3 выхода в параллель) (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V2  33  // 12в силовой выход с ULN2003 одинарный  (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V3  34  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V4  35  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
    
    // выходы 0-10в
    #define PIN_DEVICE_FC         DAC0  // ++ DAC0  //Частотный преобразователь, выход 0-10в
   //#define PIN_DEVICE_FC2      DAC1  // ++ DAC1   //Частотный преобразователь2, выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1         2  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1         5  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1         6  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1         7  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   
    #define PIN_MODBUS_RSE        22     //++   Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)

   // датчики
    #define PIN_ONE_WIRE_BUS   23       // ++ нога с интерфейсом OneWire ВСЕ температурные датчики
    #define ADC_SENSOR_PEVA    13       // ++ НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    12       // ++ НОМЕР канала ацп (в нумерации sam3x!) нога куда прицеплен датчик давления PCON
 
    // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER            3       // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_SLOWP   36       // ++ DIN1 Датчик низкого давления
    #define PIN_SENSOR_SHIGHP  37       // ++ DIN2 Датчик высокого давления
    #define PIN_SENSOR_SERRFC  38       // ++ DIN3 Сигнал ошибка инвертора
    //#define PIN_SENSOR_SFLOWCON  39       // ++ DIN4 Датчик потока по кондесатору
    //#define PIN_SENSOR_SFLOWEVA  40       // ++ DIN5 Датчик потока по испарителю
    //#define PIN_SENSOR_SEVA      41       // ++ DIN6 Датчик протока по испарителю
    
    // Имена индексов ВАЖЕН ПОРЯДОК!
     #define SLOWP             0        // Датчик низкого давления
     #define SHIGHP            1        // Датчик высокого давления
     #define SERRFC           2        // Сигнал ошибка инвертора

      // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = {  PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                           PIN_SENSOR_SHIGHP,         // ++ DIN2 Датчик высокого давления
                                           PIN_SENSOR_SERRFC         // ++ DIN3 Сигнал ошибка инвертора
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { "Датчик низкого давления",       // аварийный
                                         "Датчик высокого давления",      // аварийный
                                         "Сигнал ошибки Omron MX2"        // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {"SLOWP",            // Датчик низкого давления
                                        "SHIGHP",           // Датчик высокого давления
                                        "SERRFC"           // Сигнал ошибка инвертора
                                       };          
              
     
      const bool TESTINPUT[INUMBER]={true,true,true};                  // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={false,false,false};              // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ (актуально только для pALARM )
      const TYPE_SENSOR SENSORTYPE[INUMBER]={pALARM,pALARM,pALARM};    // тип контактного датчика  pALARM, pSENSOR,  pPULSE
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            3       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   39     // ++ DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   40     // ++ DIN5 Датчик потока по испарителю
    #define PIN_SENSOR_FLOWPCON  41     // ++ DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define FLOWCON        0        // Датчик потока по кондесатору
     #define FLOWEVA        1        // Датчик потока по испарителю
     #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
     const uint8_t pinsFrequency[FNUMBER] = {PIN_SENSOR_FLOWCON,       // - DIN4 Датчик потока по кондесатору
                                             PIN_SENSOR_FLOWEVA,        // - DIN5 Датчик потока по испарителю
                                             PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                             };
      // Описание датчиков
      const char *noteFrequency[FNUMBER] = { "Датчик потока по кондесатору (кубы/час)",       // - DIN4 Датчик потока по кондесатору
                                             "Датчик потока по испарителю (кубы/час)",        // - DIN5 Датчик потока по испарителю
                                             "Датчик протока по предконденсатору (кубы/час)"  // - DIN6 Датчик протока по предконденсатору
                                           };
      // Имена датчиков
      const char *nameFrequency[FNUMBER] = { "FLOWCON",                      // Датчик потока по кондесатору
                                             "FLOWEVA",                       // Датчик потока по кондесатору
                                             "FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
              
      const float TRANSFLOW[FNUMBER]={0.43,0.43,0.43};                         // Коэффициент преобразования частота - поток
      const uint16_t TESTFLOW[FNUMBER]={700,2100,2100};                        // Значения датчиков при тестировании  опция TEST
      const uint16_t MINFLOW[FNUMBER]= {201,1001,1001};                        // МИНИМАЛЬНЫЕ Значения датчиков


   // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define RNUMBER            7        // Число исполнительных устройств (всех)
     // устройства 220 вольт
    #define PIN_DEVICE_RCOMP           46       // ++ Реле включения компрессора (через пускатель)
    #define PIN_DEVICE_RPUMPO          47       // ++ Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_R3WAY           48       // ++ 3-ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
//    #define PIN_DEVICE_RTRV          11       // ++ 4-ходовой клапан
    #define PIN_OMRON_RESET            49        // ++ DOUT2 Выход для сброса инвертора
    #define PIN_DEVICE_RPUMPI          50       // ++ Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RBOILER         51       // ++ Включение ТЭНа бойлера
    #define PIN_DEVICE_RSUPERBOILER    53       // ++ реле насоса супербойлера
    
 //   #define PIN_DEVICE_RFAN1         11       // ++ Реле включения вентилятора испарителя №1
 //   #define PIN_DEVICE_RFAN2         11       // ++ Реле включения вентилятора испарителя №2
 //   #define PIN_DEVICE_REVI          11       // ++ Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
 //   #define PIN_DEVICE_RHEAT           12       // ++ Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //   #define PIN_DEVICE_RPUMPB          13       // ++ Реле насоса циркуляции бойлера (ГВС)

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
    #define RPUMPO             1          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define R3WAY              2          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define RRESET             3          // Выход для сброса инвертора
    #define RPUMPI             4          // Реле включения насоса входного контура  (геоконтур)
    #define RBOILER            5          // Включение ТЭНа бойлера
    #define RSUPERBOILER       6          // реле насоса супербойлера
 //   #define RTRV               7          // 4-ходовой клапан (охлаждение)
 //   #define RFAN1              5          // Реле включения вентилятора испарителя №1
 //   #define RFAN2              6          // Реле включения вентилятора испарителя №2
 //   #define REVI               6          // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
 //   #define RHEAT              7          // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
 //   #define RPUMPB             7          // Реле насоса циркуляции бойлера (ГВС)
     
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ Реле включения компрессора (через пускатель)
                                        PIN_DEVICE_RPUMPO,      // ++ Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_R3WAY,       // ++ Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
                                        PIN_OMRON_RESET,        // ++ Выход для сброса инвертора
                                        PIN_DEVICE_RPUMPI,      // ++ Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RBOILER,     // ++ Включение ТЭНа бойлера
                                        PIN_DEVICE_RSUPERBOILER ,
  //                                      PIN_DEVICE_RTRV
                                        // ++ реле насоса супербойлера
  //                                      PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
  //                                      PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
  //                                      PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
  //                                      PIN_DEVICE_RHEAT,       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
  //                                      PIN_DEVICE_RPUMPB       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
                                        
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора",
                                     "Реле включения насоса отопления",
                                     "Трех ходовой кран, переключение ТН между отоплением и ГВС ",
                                     "Реле сброса ошибки инвертора",
                                     "Реле включения насоса геоконтура",
                                     "Реле включение ТЭНа бойлера",
                                     "Реле насоса супербойлера",
  //                                   "4-х ходовой"
  //                                   "Реле включения вентилятора испарителя №1",
  //                                   "Реле включения вентилятора испарителя №2",
  //                                   "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
    //                                 "Реле включение ТЭНа системы отопления (электрокотел)",
    //                                 "Реле насоса циркуляции бойлера (ГВС)"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора
                                     "RPUMPO",         // Реле включения насоса отопления
                                     "R3WAY",          // Трех ходовой кран, переключение ТН между отоплением и ГВС,
                                     "RRESET",
                                     "RPUMPI",         // Реле включения насоса геоконтура
                                     "RBOILER",        // Реле включение ТЭНа бойлера
                                     "RSUPERBOILER",  // + реле насоса супербойлера
  //                                   "RTRV"           // 4-ходовой клапан инвертирован
  //                                   "RFAN1",          // Реле включения вентилятора испарителя №1
  //                                   "RFAN2",          // Реле включения вентилятора испарителя №2
  //                                   "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
       //                              "RHEAT",          // Реле насоса циркуляции бойлера (ГВС)
      //                               "RPUMPB"         // Выход для управления пуском инвертора
                                      
                                     } ;     
 
    // Конфигурация системы отопления --------------------------------------------------------------------------------
    // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
    // Могут быть задействованы разные датчики!
     #define FEED      sTemp[TCONOUTG].get_Temp()               // Подача системы CO
     #define RET       sTemp[TCONING].get_Temp()                // Обратка системы CO
     
     // Определение насосов конденсатора и испарителя по именам
     #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
     #define PUMP_IN       RPUMPI                               // Насос входного  контура (гео или воздушник)

      // ДАТЧИКИ ТЕМПЕРАТУРЫ до 14 шт. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
      // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
      /* Справочно нумерация датчиков
       * Температура хранится в сотых градуса
       * #define TOUT        0                // Температура улицы
       * #define TIN         1                // Температура в доме
       * #define TEVAIN      2                // Температура на входе испарителя (по фреону)
       * #define TEVAOUT     3                // Температура на выходе испарителя (по фреону)
       * #define TCONIN      4                // Температура на входе конденсатора (по фреону)
       * #define TCONOUT     5                // Температура на выходе конденсатора (по фреону)
       * #define TBOILER     6                // Температура в бойлере ГВС
       * #define TACCUM      7                // Температура на выходе теплоаккмулятора
       * #define TRTOOUT     8                // Температура на выходе RTO (по фреону)
       * #define TCOMP       9                // Температура нагнетания компрессора
       * #define TEVAING     10               // Температура на входе испарителя (по гликолю)
       * #define TEVAOUTG    11               // Температура на выходе испарителя (по гликолю)
       * #define TCONING     12               // Температура на входе конденсатора (по гликолю)
       * #define TCONOUTG    13               // Температура на выходе конденсатора (по гликолю)
       */
      // Наличие датчика в конфигурации
     const boolean SENSORTEMP[TNUMBER]={true,true,true,true,false,true,true,false,true,true,true,true,true,true};
      // минимальные значения температур
     const int16_t MINTEMP[TNUMBER]={-4000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000,-3000};
     // Макимальные значения температур
     const int16_t MAXTEMP[TNUMBER]={9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500,9500};
     // Значения датчиков при тестировании  опция TEST В СОТЫХ ГРАДУСА
     const int16_t TESTTEMP[TNUMBER]={1000,2000,300,400,1000,3000,700,500,500,500,500,500,2000,2000}; 

      // АНАЛОГОВЫЕ ДАТЧИКИ максимум 2 шт -------------------------------------------------------------------
      // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
      /* Справочно нумерация датчиков
       * Давление харится в сотых бара
       * #define PEVA        0                // Датчик давления испарителя.
       * #define PCON        1                // Датчик давления нагнетания.
       */
       const boolean SENSORPRESS[ANUMBER]={true,true};
       const int16_t MINPRESS[ANUMBER]={400,400};       // минимальные значения давления
       const uint16_t MAXPRESS[ANUMBER]={2000,3100};    // Максимальные значения давления
       const uint16_t TESTPRESS[ANUMBER]={750,1600};    // Значения датчиков при тестировании  опция TEST
  
      // ------------------- EEV -----------------------------------
      // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
      #define EEV_DEF                     // Наличие ЭРВ в конфигурации
      #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
          //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
          //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
          #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
          #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
          #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
          #define EEV_STEPS         490            // Число шагов ЭРВ 480
          #define EEV_PSTART        220            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
          #define EEV_START         150            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
          #define EEV_MIN_STEPS     2              // Минимальное число шагов открытия ЭРВ
          #define EEV_HOLD_MOTOR    true           // Режим "удержания" шагового двигателя ЭРВ
          #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
          // ЭРВ Времена и задержки
          #define DELAY_ON_PID_EEV  90             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
          #define DELAY_ON3_EEV     5              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
          #define DELAY_START_POS   30             // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
          #define DELAY_OFF_EEV     10             // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
       #endif   

      // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
      const boolean DEVICEFC=true;  // Наличие Частотного преобразователя в конфигурации
      // Константы частотного преобразователя для конкртеной  реализации
      #define FC_USE_RCOMP                     // Использовать для пуска/остановки инвертора отдельный выход RCOMP (команда по модбасу не посылается)
      #define FC_UPTIME         (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления
      
      #define FC_PID_FREQ_STEP    (2*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
      #define FC_PID_STOP          95          // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом

      #define FC_DT_COMP_TEMP   (5*100)        // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
      #define FC_DP_CON_PRESS   50             // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

      #define FC_START_FREQ       (60*100)       // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц
      #define FC_START_FREQ_BOILER (50*100)      // Стартовая частота частота инвертора (см компрессор) в 0.01 Гц ГВС
      
      #define FC_MIN_FREQ         (40*100)       // Минимальная  частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MIN_FREQ_COOL    (60*100)       // Минимальная  частота инвертора при охлаждении в 0.01 Гц
      #define FC_MIN_FREQ_BOILER  (45*100)       // Минимальная  частота инвертора при нагреве ГВС в 0.01 Гц
      #define FC_MIN_FREQ_USER    (35*100)       // Минимальная  частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
      
      #define FC_MAX_FREQ         (110*100)      // Максимальная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_MAX_FREQ_COOL    (100*100)      // Максимальная частота инвертора в режиме охлаждения  в 0.01 Гц
      #define FC_MAX_FREQ_BOILER  (60*100)       // Максимальная частота инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
      #define FC_MAX_FREQ_USER    (190*100)      // Максимальная частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
                
      #define FC_STEP_FREQ        (1*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 Гц
      #define FC_STEP_FREQ_BOILER (2*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 Гц
      
      #define FC_DT_TEMP        (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
      #define FC_DT_TEMP_BOILER (2*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса
       
      #define FC_MAX_POWER      (2.0*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
      #define FC_MAX_POWER_BOILER (1.0*10)     // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт
    
      #define FC_MAX_CURRENT    (10.0*100)     // Максимальный ток инвертора (см компрессор) в 0.01 А
      #define FC_MAX_CURRENT_BOILER (10.0*100) // Максимальный ток инвертора для ГВС в 0.01 А
   
      //#define FC_FULL_INIT                     // Полная инициализация инвертора при страте контроллера (записываются регистры нужные значеня) МОЖНО закоментировать
      // Для FC_FULL_INIT что прописывается в ПЧ
      #define FC_BASE_FREQ        (120*100)       // Основная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_ACCEL_TIME     (60*100)        // Время разгона (см компрессор) в 0.01 сек
      #define FC_DEACCEL_TIME   (90*100)        // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении

      // Временные задержки
    #define DELAY_ON_PUMP     60             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    60             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС

#endif  // CONFIG_4 








// -----------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------- МОЙ ОСНОВНОЙ КОНФИГ -----------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   5 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
#ifdef CONFIG_5    // Имя и описание конфигурации и ОСОБЕННОСТИ конфигурации ---------------------------------------------------------
    #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "pav2000inv"                                        // Имя конфигурации
    #define CONFIG_NOTE   "Инвертор с компрессором BLDC с шаговым ЭРВ и РТО"  // Описание конфигурации
   #define HP_SCHEME       2                                                   // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
 //   #define DEFROST                                                           // нужна разморозка
         #define ONEWIRE_DS2482                                                // + Использование мастера i2c Onewire DS2482 (адрес AD0 = 0)
   //    #define ONEWIRE_DS2482_SECOND                                        // второй мастер i2 Onewire DS2482 (адрес AD0 = 1)
   //    #define ONEWIRE_DS2482_SECOND_2WAY                                   // 2-х проводный OneWire второго мастера (паразитное питание)
   //    #define ONEWIRE_DONT_CHG_RES                                         // Не менять разрешение датчиков
        #define NO_SD_CONTROL                                                 // + Использование выхода для контроля вставленной SD карты
        #define POWER_CONTROL                                                 // + Использование выхода для управления питанием платы (можно сбросить все кроме контроллера)
        #define SPI_FLASH                                                     // + Наличие чипа флеш памяти на шине SPI
        #define DRV_EEV_L9333                                                 // + Драйвера ЭРВ L9333  диагностика
        #define KEY_ON_OFF                                                    // + KEY1 Наличие кнопки включения и переключения в safeNetwork (нажата при сбросе)
        #define VCC_CONTROL                                                   // + Контроль за питанием контрола (прямое чтение) смотреть ADC_VCC и K_VCC_POWER
        #define EXTERNAL_AREF                                                 // + Использование внешней опоры для АЦП (ADR4525ARZ) требует доработки DUE и поддержки платы
        #define I2C_EEPROM_64KB                                               // + Использование памяти I2C для записи журнала при коментарии используется оперативка
        #define I2C_FRAM_MEMORY       0                                       // + Тип используемой памяти 0 - Флеш 1 (обычно) - FRAM память (vad711)
        #define USE_ELECTROMETER_SDM                                          // + Наличие счетчика SDM120 в конфигурации
//        #define FLOW_CONTROL                                                // Контроль потоков через ПТО (актуален если установлены расходомеры)
        #define LOAD_VERIFICATION                                             // Признак чтения настроек c проверкой версии, длины, CRC16. Закоментируйте эту строку для ПОПЫТКИ загрузить старый формат, Запись всегда идет в новом
     // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
    const IPAddress defaultIP(192, 168, 0, 177);
    const IPAddress defaultSDNS(192, 168, 0, 191);
    const IPAddress defaultGateway(192, 168, 0, 1);
    const IPAddress defaultSubnet(255, 255, 255, 0);
    const boolean  defaultDHCP=false;              
    
    #define USE_SCHEDULER       // Использовать расписание для управления ТН   
   // #define RELAY_INVERT   // инвертирование реле выходов реле
    #ifdef EXTERNAL_AREF                     // Какая опора для АЦП используется
       #define SAM3X_ADC_REF  2.5006         // Используется внешняя опора ADR4525ARZ плата pav2000 (UT71E результататы ЗИП 2.4997 ТН 2.5006)
    #else
       #define SAM3X_ADC_REF  3.30           // Штатное подключение используется питание DUE
    #endif

    // Временные задержки/времена  начала дефайна в конфиге начинается DELAY  в константах начинается с TIME 
    #define DELAY_ON_PUMP     60             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    60             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС
        
    // --------------------------------------------------------------------------------
    // ЖЕЛЕЗО  - привязка к ногам контроллера  В зависимости от конкретной схемы и платы
    // Для каждой конфигурации теперь свои определения!!!
    // --------------------------------------------------------------------------------
    // SPI шина управление отдельными устройствами до 3-х устройств (активный уровень низкий)
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом w5500
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
    #define PIN_SPI_CS_FLASH   52       // ++ FLASH-CS сигнал CS управление чипом флеш памяти (32 мБит)
    // Сервис
    #define PIN_ETH_RES         8       // ++ ETH-RES Сброс сетевого чипа w5500 активный low нормально high
    #define PIN_ETH_INT         9       // ++ ETH-INT Прерывание с w5500 пока не используется надо програмиировать на вход
    #define PIN_ETH_CS         10       // ++ ETH-CS Чип селект SPI w5500
    #define PIN_LED1           38       // ++ LED1 Первый красный светодиод для контроля (питание и фатальная ошибка freeRTOS)
    #define PIN_LED_OK         39       // ++ LED2 Второй зеленый светодиод Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_KEY1           40       // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
    #define PIN_KEY2           41       // +  KEY2 Вторая кнопка
    #define PIN_KEY3           42       // +  KEY3 Третья кнопка
    #ifdef DEMO
       #define PIN_BEEP           88//43       // ++ SOUND Выход на пищалку  88- нога не использующиеся
    #else
       #define PIN_BEEP           43       // ++ SOUND Выход на пищалку  88- нога не использующиеся
    #endif
    #define PIN_STEP_DIAG      44       // ++ STEP-DIAG Контроль драйвера шаговика
    #define PIN_NO_SD_CARD     45       // ++ CD Отсутствие карты в слоте
    #define PIN_POWER_ON       50       // ++ PWR-OFF Включение питания на всю плату (включение LOW)
    #define PIN_ADC_VCC        3        // ++ Нога АЦП куда заводится через делитель напряжение питания (в нумерации sam3x!) в ардуино это А4, коэффициент пересчета K_VCC_POWER

    // EEV куда подключено общий СИНИЙ
    #define PIN_EEV1_D24       24       // ++ первая нога ЭРВ D24  ОРАНЖЕВЫЙ  +А
    #define PIN_EEV2_D25       25       // ++ вторая нога ЭРВ D25  КРАСНЫЙ    +B
    #define PIN_EEV3_D26       26       // ++ третья нога ЭРВ D26  ЖЕЛТЫЙ     -A
    #define PIN_EEV4_D27       27       // ++ четвертая нога ЭРВ D27 ЧЕРНЫЙ   -B

    //Частотный преобразователь
    #define PIN_DEVICE_FC      DAC0     // ++ DAC Аналоговое управление инвертором
    // MODBUS   если закоментировать то это приведет к осутсвию модбаса в конфигурации (работа инвертора и счетчика будет не возможна)
    #define PIN_MODBUS_RSE     22       // +  RS485DE  Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)
        
    // Датчики
    #ifndef ONEWIRE_DS2482
      #define PIN_ONE_WIRE_BUS   23       // ++ 1-W-1 нога с интерфейсом OneWire ВСЕ температурные датчики в зависимости от ключей платы
    #endif
    #define ADC_SENSOR_PEVA    11       // + НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    10       // - НОМЕР канала ацп (в нумерации sam3x!) нога куда прицеплен датчик давления PCON
  
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER            3       // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_SLOWP   32       // ++ DIN1 Датчик низкого давления
    #define PIN_SENSOR_SHIGHP  33       // ++ DIN2 Датчик высокого давления
    #define PIN_SENSOR_SERRFC 34       // ++ DIN3 Сигнал ошибка инвертора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define SLOWP             0        // Датчик низкого давления
     #define SHIGHP            1        // Датчик высокого давления
     #define SERRFC           2        // Сигнал ошибка инвертора

      // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = {  PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                           PIN_SENSOR_SHIGHP,         // ++ DIN2 Датчик высокого давления
                                           PIN_SENSOR_SERRFC         // ++ DIN3 Сигнал ошибка инвертора
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { "Датчик низкого давления",       // аварийный
                                         "Датчик высокого давления",      // аварийный
                                         "Сигнал ошибки Omron MX2"        // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {"SLOWP",            // Датчик низкого давления
                                        "SHIGHP",           // Датчик высокого давления
                                        "SERRFC"           // Сигнал ошибка инвертора
                                       };          
              
     
      const bool TESTINPUT[INUMBER]={true,true,true};                  // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={false,false,false};              // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ (актуально только для pALARM )
      const TYPE_SENSOR SENSORTYPE[INUMBER]={pALARM,pALARM,pALARM};    // тип контактного датчика  pALARM, pSENSOR,  pPULSE
      
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            1       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   35     // - DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   36     // - DIN5 Датчик потока по испарителю
    #define PIN_SENSOR_FLOWPCON  32     // - DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
     #define FLOWCON        0        // Датчик потока по кондесатору
     #define FLOWEVA        1        // Датчик потока по испарителю
     #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
     const uint8_t pinsFrequency[FNUMBER] = {PIN_SENSOR_FLOWCON       // - DIN4 Датчик потока по кондесатору
 //                                            ,PIN_SENSOR_FLOWEVA        // - DIN5 Датчик потока по испарителю
//                                             PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                             };
      // Описание датчиков
      const char *noteFrequency[FNUMBER] = { "Датчик потока по кондесатору (кубы/час)"       // - DIN4 Датчик потока по кондесатору
//                                             ,"Датчик потока по испарителю (кубы/час)"        // - DIN5 Датчик потока по испарителю
//                                             "Датчик протока по предконденсатору"  // - DIN6 Датчик протока по предконденсатору
                                           };
      // Имена датчиков
      const char *nameFrequency[FNUMBER] = { "FLOWCON"                      // Датчик потока по кондесатору
 //                                            ,"FLOWEVA"                       // Датчик потока по кондесатору
 //                                            "FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
              
      const float TRANSFLOW[FNUMBER]={36.75};                        // Коэффициент преобразования частота - поток
      const uint16_t TESTFLOW[FNUMBER]={700};                        // Значения датчиков при тестировании  опция TEST
      const uint16_t MINFLOW[FNUMBER]= {201};                        // МИНИМАЛЬНЫЕ Значения датчиков
    
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ----------------------------------
    #define RNUMBER            9           // Число исполнительных устройств (всех) 7 силовых 2 - сухих контакта
    // НОГИ Устройства силовые 220 вольт (максимум до 8 штук)
    #define PIN_DEVICE_RCOMP     2        // ++ PWR_ON1 Реле включения компрессора (через инвертор)
    #define PIN_DEVICE_RPUMPI    12       // ++ PWR_ON2 Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RPUMPO    13       // ++ PWR_ON3 Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_RBOILER   28       // ++ PWR_ON4 Включение ТЭНа бойлера
    #define PIN_DEVICE_RTRV      11       // ++ PWR_ON5 4-ходовой клапан
 //   #define PIN_DEVICE_RFAN1   46       // - Реле включения вентилятора испарителя №1
 //   #define PIN_DEVICE_RFAN2   46       // - Реле включения вентилятора испарителя №2
 //   #define PIN_DEVICE_REVI    12       // - Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define PIN_DEVICE_R3WAY     7        // ++ PWR_ON6 Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define PIN_DEVICE_RHEAT     30       // ++ PWR_ON7 Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
    #define PIN_DEVICE_RPUMPB    29       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
    // НОГИ Устройства не силовые - выход сухой контакт (максимум до 4 штук)
 //   #define PIN_OMRON_START    2        // ++ DOUT1 Выход для управления пуском инвертора
    #define PIN_OMRON_RESET      3        // ++ DOUT2 Выход для сброса инвертора
//    #define PIN_5              5        // + DOUT3 Не используется
//    #define PIN_6              6        // + DOUT4 Не используется

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
    #define RPUMPI             1          // Реле включения насоса входного контура  (геоконтур)
    #define RPUMPO             2          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define RBOILER            3          // Включение ТЭНа бойлера
    #define RTRV               4          // 4-ходовой клапан (охлаждение)
 //   #define RFAN1            5          // Реле включения вентилятора испарителя №1
 //   #define RFAN2            6          // Реле включения вентилятора испарителя №2
 //   #define REVI             5          // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
    #define R3WAY              5          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
    #define RHEAT              6          // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
    #define RPUMPB             7          // Реле насоса циркуляции бойлера (ГВС)
 //   #define RSTART             8          // Выход для управления пуском инвертор
    #define RRESET             8          // Выход для сброса инвертора
    
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ PWR_ON1 Реле включения компрессора (через пускатель)
                                        PIN_DEVICE_RPUMPI,      // ++ PWR_ON2 Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RPUMPO,      // ++ PWR_ON3 Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_RBOILER,     // ++ PWR_ON4 Включение ТЭНа бойлера
                                        PIN_DEVICE_RTRV,        // ++ PWR_ON5 4-ходовой клапан
     //                                 PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
     //                                 PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
     //                                 PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                        PIN_DEVICE_R3WAY,       // ++ PWR_ON6 Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
                                        PIN_DEVICE_RHEAT,       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
                                        PIN_DEVICE_RPUMPB,      // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
     //                                 PIN_OMRON_START,        // ++ DOUT1 Выход для управления пуском инвертора
                                        PIN_OMRON_RESET,        // ++ DOUT2 Выход для сброса инвертора
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора (через инвертор)",
                                     "Реле включения насоса входного контура  (геоконтур)",
                                     "Реле включения насоса выходного контура (отопление и ГВС)",
                                     "Реле включение ТЭНа бойлера (ГВС)",
                                     "4-ходовой клапан (для режима охлаждения надо включить)",
 //                                    "Реле включения вентилятора испарителя №1",
 //                                    "Реле включения вентилятора испарителя №2",
 //                                    "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
                                     "Трех ходовой кран, переключение ТН между отоплением и ГВС ",
                                     "Реле включение ТЭНа системы отопления (электрокотел)",
                                     "Реле насоса циркуляции бойлера (ГВС)",
 //                                    "Выход для управления пуском инвертора",
                                     "Выход для сброса инвертора"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора (через пускатель)
                                     "RPUMPI",         // Реле включения насоса входного контура  (геоконтур)
                                     "RPUMPO",         // Реле включения насоса выхордного контура  (отопление и ГВС)
                                     "RBOILER",        // Реле включение ТЭНа бойлера (ГВС)
                                     "RTRV",           // 4-ходовой клапан инвертирован
 //                                    "RFAN1",          // Реле включения вентилятора испарителя №1
 //                                    "RFAN2",          // Реле включения вентилятора испарителя №2
 //                                    "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
                                     "R3WAY",          // Трех ходовой кран, переключение ТН между отоплением и ГВС
                                     "RHEAT",          // Реле насоса циркуляции бойлера (ГВС)
                                     "RPUMPB",         // Выход для управления пуском инвертора
 //                                    "RSTART",         // Выход для управления пуском инвертора
                                     "RRESET"          // Выход для сброса инвертора
                                     } ; 
     
    // Конфигурация системы отопления --------------------------------------------------------------------------------
    // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
    // Могут быть задействованы разные датчики!
    // Конденсатор запитан  в противотоке!!
     #define FEED      sTemp[TCONOUTG].get_Temp()               // Подача системы СО- выход по гликолю кондесатора
     #define RET       sTemp[TCONING].get_Temp()                // Обратка системы СО- вход по гликолю кондесатора

     // Определение насосов конденсатора и испарителя по именам
     #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
     #define PUMP_IN       RPUMPI                               // Насос входного  контура (гео или воздушник)

     // ДАТЧИКИ ТЕМПЕРАТУРЫ до 14 шт. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
    // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
    /* Справочно нумерация датчиков
     * Температура хранится в сотых градуса
     * #define TOUT        0                // Температура улицы
     * #define TIN         1                // Температура в доме
     * #define TEVAIN      2                // Температура на входе испарителя (по фреону)
     * #define TEVAOUT     3                // Температура на выходе испарителя (по фреону)
     * #define TCONIN      4                // Температура на входе конденсатора (по фреону)
     * #define TCONOUT     5                // Температура на выходе конденсатора (по фреону)
     * #define TBOILER     6                // Температура в бойлере ГВС
     * #define TACCUM      7                // Температура на выходе теплоаккмулятора
     * #define TRTOOUT     8                // Температура на выходе RTO (по фреону)
     * #define TCOMP       9                // Температура нагнетания компрессора
     * #define TEVAING     10               // Температура на входе испарителя (по гликолю)
     * #define TEVAOUTG    11               // Температура на выходе испарителя (по гликолю)
     * #define TCONING     12               // Температура на входе конденсатора (по гликолю)
     * #define TCONOUTG    13               // Температура на выходе конденсатора (по гликолю)
     */
       // Наличие датчика в конфигурации
       const boolean SENSORTEMP[TNUMBER]={true,true,true,true,false,false,true,true,true/*TRTO*/,true,true,true,true,true}; 
       // минимальные значения температур
       const int16_t MINTEMP[TNUMBER]={-3500,-3000,-1500,-1000,-2000,-2000,0,-500,-1510,100,-1000,-1000,-1000,-1000};
       // Макимальные значения температур
       const int16_t MAXTEMP[TNUMBER]={4000,3500,2520,4000,7000,6520,5510,4200,4010,8700,2500,2500,5000,5500};
       // Значения датчиков при тестировании  опция TEST В СОТЫХ ГРАДУСА
       const int16_t TESTTEMP[TNUMBER]={1000,2000,300,400,1000,3000,765,123,-500,500,0,0,2000,2000};
       // Ошибки датчиков (систематические) нужны для калибровки ОШИБКИ ДОБАВЛЯЮТСЯ!!! к значениям В СОТЫХ ГРАДУСА
       const int16_t ERRTEMP[TNUMBER]=  {     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 };
       
      // АНАЛОГОВЫЕ ДАТЧИКИ максимум 2 шт -------------------------------------------------------------------
      // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
      /* Справочно нумерация датчиков
      * Давление харится в сотых бара
      * #define PEVA        0                // Датчик давления испарителя.
      * #define PCON        1                // Датчик давления нагнетания.
      */
      const boolean SENSORPRESS[ANUMBER]={true,false};    
      const int16_t MINPRESS[ANUMBER]={350,100};        // минимальные значения давления
      const uint16_t MAXPRESS[ANUMBER]={1500,3000};     // Макимальные значения давления
      const uint16_t TESTPRESS[ANUMBER]={600,1200};      // Значения датчиков при тестировании  опция TEST

      // ------------------- EEV -----------------------------------
      // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
      #define EEV_DEF                     // Наличие ЭРВ в конфигурации
      #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
          //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
          //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
          #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
          #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
          #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
          #define EEV_STEPS         490            // Число шагов ЭРВ 480
          #define EEV_PSTART        220            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
          #define EEV_START         150            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
          #define EEV_MIN_STEPS     2              // Минимальное число шагов открытия ЭРВ
          #define EEV_HOLD_MOTOR    false          // Режим "удержания" шагового двигателя ЭРВ
          #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
          // ЭРВ Времена и задержки
          #define DELAY_ON_PID_EEV  90             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
          #define DELAY_ON3_EEV     5              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
          #define DELAY_START_POS   30             // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
          #define DELAY_OFF_EEV     10             // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
       #endif       

      // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
      const boolean DEVICEFC=true;                // Наличие Частотного преобразователя в конфигурации
 //     #define FC_ANALOG_CONTROL                      // Использование аналогового управления частотником, Для использования 485 закоментировать эту строку
      #ifdef  FC_ANALOG_CONTROL
        #define FC_USE_RCOMP                   // Если определен аналог всегда использовать отдельный выход на команду ХОД
      #endif  
      // Константы частотного преобразователя для конкртеной  реализации
      #define FC_USE_RCOMP                       // Использовать для пуска/остановки инвертора отдельный выход RCOMP (команда по модбасу не посылается)
      #define FC_UPTIME           (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления
      
      #define FC_PID_FREQ_STEP    (2*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
      #define FC_PID_STOP            90          // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом (плавный подход к границе)

      #define FC_DT_COMP_TEMP     (5*100)        // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
      #define FC_DP_CON_PRESS     50             // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

      #define FC_START_FREQ       (60*100)       // Стартовая частота частота инвертора отопление/охлаждение (см компрессор) в 0.01 Гц
      #define FC_START_FREQ_BOILER (50*100)      // Стартовая частота частота инвертора ГВС (см компрессор) в 0.01 Гц ГВС
      
      #define FC_MIN_FREQ         (40*100)       // Минимальная  частота инвертора при нагреве (см компрессор) в 0.01 Гц
      #define FC_MIN_FREQ_COOL    (60*100)       // Минимальная  частота инвертора при охлаждении в 0.01 Гц
      #define FC_MIN_FREQ_BOILER  (40*100)       // Минимальная  частота инвертора при нагреве ГВС в 0.01 Гц
      #define FC_MIN_FREQ_USER    (35*100)       // Минимальная  частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
      
      #define FC_MAX_FREQ         (110*100)      // Максимальная частота инвертора при нагреве (см компрессор) в 0.01 Гц
      #define FC_MAX_FREQ_COOL    (100*100)      // Максимальная частота инвертора в режиме охлаждения  в 0.01 Гц
      #define FC_MAX_FREQ_BOILER  (55*100)       // Максимальная частота инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
      #define FC_MAX_FREQ_USER    (120*100)      // Максимальная частота инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 Гц
          
      #define FC_STEP_FREQ        (2*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 Гц
      #define FC_STEP_FREQ_BOILER (5*100)        // Шаг уменьшения частоты инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 Гц
      
      #define FC_DT_TEMP          (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
      #define FC_DT_TEMP_BOILER   (2*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса
       
      #define FC_MAX_POWER        (1.8*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
      #define FC_MAX_POWER_BOILER (1.5*10)       // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт
    
      #define FC_MAX_CURRENT      (10.0*100)     // Максимальный ток инвертора (см компрессор) в 0.01 А
      #define FC_MAX_CURRENT_BOILER (11.0*100)   // Максимальный ток инвертора для ГВС в 0.01 А
   
      //#define FC_FULL_INIT                     // Полная инициализация инвертора при страте контроллера (записываются регистры нужные значеня) МОЖНО закоментировать
      // Для FC_FULL_INIT что прописывается в ПЧ
      #define FC_BASE_FREQ        (120*100)       // Основная частота инвертора (см компрессор) в 0.01 Гц
      #define FC_ACCEL_TIME     (60*100)        // Время разгона (см компрессор) в 0.01 сек
      #define FC_DEACCEL_TIME   (90*100)        // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении
      
  #endif  // конец Главного конфига 5








// -----------------------------------------------------------------------------------------------------------------------------------
// =============================================== C O N F I G   6 ===================================================================
// -----------------------------------------------------------------------------------------------------------------------------------
#ifdef CONFIG_6    // Имя и описание конфигурации и ОСОБЕННОСТИ конфигурации ---------------------------------------------------------
   // #define DEMO                                // Включение демо режима
    #define CONFIG_NAME   "vad7"
    #define CONFIG_NOTE   "Частотник, асинхонник 3 фазы, ЭРВ, РТО, 2 датчика давления"
    #define HP_SCHEME       3        // Номер схемы который выводится на морде, подмена файлов plan[HPscheme].png -> plan1.png
    #define UART_SPEED    250000    // Скорость отладочного порта
//  #define SUPERBOILER               // Использование предкондесатора для нагрева ГВС
//  #define SUPERBOILER_FC (90*100)   // частота супербойлера для частотника
//  #define SUPERBOILER_DT (10*100)   // разница температур компресссора и бойлера для включения насоса
    #define SPI_FLASH         // + Наличие чипа флеш памяти на шине SPI
    #define ONEWIRE_DS2482        // + Использование мастера i2c Onewire DS2482 (адрес AD0 = 0)
    #define ONEWIRE_DS2482_SECOND   // второй мастер i2 Onewire DS2482 (адрес AD0 = 1)
    #define ONEWIRE_DS2482_SECOND_2WAY  // 2-х проводный OneWire второго мастера (паразитное питание)
    #define ONEWIRE_DONT_CHG_RES    // Не менять разрешение датчиков
//    #define I2C_EEPROM_64KB       // + Использование памяти I2C для записи журнала при коментарии используется оперативка
    #define I2C_FRAM_MEMORY  0//1     // 1 - FRAM память
    #define LOAD_VERIFICATION     // Признак чтения настроек c проверкой версии, длины, CRC16. Закоментируйте эту строку для ПОПЫТКИ загрузить старый формат, Запись всегда идет в новом
    #define USE_ELECTROMETER_SDM    // + Наличие счетчика SDM
    #define USE_SDM630          // Наличие счетчика SDM630 - 3 фазы
    #define EXTERNAL_AREF       // Использование внешней опоры для АЦП
    #ifdef EXTERNAL_AREF        // Какая опора для АЦП используется
      #define SAM3X_ADC_REF  3.00   // Используется внешняя опора ADR4530ARZ
    #else
      #define SAM3X_ADC_REF  3.30    // Штатное подключение используется питание DUE
    #endif
    #define USE_SCHEDULER       // Использовать расписание для управления ТН

    #define RELAY_INVERT                // Реле выходов: включение высоким уровнем (High Level trigger)

    // СЕТЕВЫЕ НАСТРОЙКИ --------------------------------------------------------------
    const IPAddress defaultIP   	(192, 168, 0, 210);
    const IPAddress defaultSDNS   	(192, 168, 0,   1);
    const IPAddress defaultGateway  (192, 168, 0,   1);
    const IPAddress defaultSubnet 	(255, 255, 255, 0);
    const boolean  defaultDHCP	=	true;

    // --------------------------------------------------------------------------------
    // ЖЕЛЕЗО  - привязка к ногам контроллера  В зависимости от конкретной схемы и платы
    // Для каждой конфигурации теперь свои определения!!!
    // --------------------------------------------------------------------------------
    // SPI шина управление отдельными устройствами до 3-х устройств (активный уровень низкий)
    #define PIN_SPI_CS_W5XXX   10       // ++ ETH-CS   сигнал CS управление сетевым чипом w5500
    #define PIN_SPI_CS_SD      4        // ++ SD-CS    сигнал CS управление SD картой
    #define PIN_SPI_CS_FLASH   52       // ++ FLASH-CS сигнал CS управление чипом флеш памяти (32 мБит)

    // Сервис
    #define PIN_ETH_RES         8         // ++ ETH-RES Сброс сетевого чипа w5500 активный low нормально high
    #define PIN_ETH_INT         9         // ++ ETH-INT Прерывание с w5500 пока не используется надо програмиировать на вход
    #define PIN_ETH_CS         10         // ++ ETH-CS Чип селект SPI w5500
    #define PIN_LED1           42         // ++ LED1 Первый красный светодиод для контроля (питание и фатальная ошибка freeRTOS)
    #define PIN_LED_ERROR      PIN_LED1   // Для библиотеки FreeRTOS
    #define PIN_LED_OK         43         // ++ LED2 Второй зеленый светодиод Выход на светодиод мигает 0.5 герца - ОК  с частотой 2 герца ошибка
    #define PIN_KEY1           44         // ++ KEY1 Первая кнопка (ТН вкл/вкл) Нажатие при включении - режим safeNetwork (настрока сети по умолчанию 192.168.0.177  шлюз 192.168.0.1, не спрашивает пароль на вход в веб морду)
    #define PIN_BEEP           45         // ++  SOUND Выход на пищалку  88- нога не использующиеся
     
    // EEV куда подключено общий СИНИЙ
    #define PIN_EEV1_D24       29  //[X40.1(от надписи)] // 1 нога ЭРВ +А ОРАНЖЕВЫЙ - коричневый
    #define PIN_EEV2_D25       30  //[X40.2]             // 2 нога ЭРВ +B КРАСНЫЙ - желтый
    #define PIN_EEV3_D26       31  //[X40.3]             // 3 нога ЭРВ -A ЖЕЛТЫЙ - зеленый
    #define PIN_EEV4_D27       32  //[X41.1(от надписи)] // 4 нога ЭРВ -B ЧЕРНЫЙ - белый
                                   //[X41.2]             // 5 нога ЭРВ Об.+12V СЕРЫЙ - экран
  
   // ЭРВ 2 (дополнительный испаритель, воздушка) - требуется четыре провода  Общий синий (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_ORANGE 24    // + Фаза А    оранжевый (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_YELLOW 25    // + Фаза ~А   желтый    (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_RED    26    // + Фаза B    красный   (пока не поддерживается прошивкой)
   // #define PIN_DEVICE_EEV_BLACK  27    // + Фаза ~B   Черный    (пока не поддерживается прошивкой)
    
    //#define PIN_DEVICE_12V1  28  // 12в силовой выход с ULN2003 (3 выхода в параллель) (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V2  33  // 12в силовой выход с ULN2003 одинарный  (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V3  34  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
    //#define PIN_DEVICE_12V4  35  // 12в силовой выход с ULN2003 одинарный (пока не поддерживается прошивкой)
    
    // выходы 0-10в
   // #define PIN_DEVICE_FC        DAC0  // ++ DAC0  //Частотный преобразователь, выход 0-10в
   //#define PIN_DEVICE_FC2        DAC1  // ++ DAC1   //Частотный преобразователь2, выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1       2  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1       5  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1       6  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   //#define PIN_DEVICE_PWM1       7  // ++ управление насосом выход 0-10в (пока не поддерживается прошивкой)
   
    #define PIN_MODBUS_RSE        22     //++   Управление направлением передачи 485 для связи с инвертором по Modbus (1-передача 0-прием)

   // датчики
    #define PIN_ONE_WIRE_BUS   23       // ++ нога с интерфейсом OneWire ВСЕ температурные датчики
    #define ADC_SENSOR_PEVA    13       // ++ НОМЕР КАНАЛА ацп (внимание - в нумерации sam3x!) нога куда прицеплен датчик давления PEVA
    #define ADC_SENSOR_PCON    12       // ++ НОМЕР канала ацп (в нумерации sam3x!) нога куда прицеплен датчик давления PCON
 
    // Контактные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define INUMBER            2       // Максимальное число контактных датчиков цифровые входы (то что поддерживается)
    //  Ноги куда прицепленны контактные датчики
//  #define PIN_SENSOR_SLOWP   36  //[X3] // ++ DIN1 Датчик низкого давления
    #define PIN_SENSOR_SHIGHP  37  //[X4] // ++ DIN2 Датчик высокого давления
    #define PIN_SENSOR_SERRFC  38  //[X5] // ++ DIN3 Сигнал ошибка инвертора
//  #define PIN_SENSOR_SFLOWCON  39       // ++ DIN4 Датчик потока по кондесатору
//  #define PIN_SENSOR_SFLOWEVA  40       // ++ DIN5 Датчик потока по испарителю
//  #define PIN_SENSOR_SEVA      41       // ++ DIN6 Датчик протока по испарителю
    
    // Имена индексов ВАЖЕН ПОРЯДОК!
//     #define SLOWP             0        // Датчик низкого давления
     #define SHIGHP            0        // Датчик высокого давления
     #define SERRFC            1        // Сигнал ошибка инвертора MX2

      // Массив ног соглано индексов
     const uint8_t pinsInput[INUMBER] = {  //PIN_SENSOR_SLOWP,          // ++ DIN1 Датчик низкого давления
                                           PIN_SENSOR_SHIGHP,         // ++ DIN2 Датчик высокого давления
                                           PIN_SENSOR_SERRFC         // ++ DIN3 Сигнал ошибка инвертора
                                         };
      // Описание датчиков
      const char *noteInput[INUMBER] = { //"Датчик низкого давления",       // аварийный
                                         "Датчик высокого давления",      // аварийный
                                         "Сигнал ошибки Частотника"        // аварийный
                                       };
      // Имена датчиков
      const char *nameInput[INUMBER] = {//"SLOWP",            // Датчик низкого давления
                                        "SHIGHP",          // Датчик высокого давления
                                        "SERRFC"           // Сигнал ошибка инвертора
                                       };          
              
     
      const bool TESTINPUT[INUMBER]={/*true,*/true,true};                  // Значения датчиков при тестировании  опция TEST
      const bool ALARMINPUT[INUMBER]={/*false,*/false,false};              // Значение датчика при аварии  ПРОВЕРИТЬ НА РЕАЛЬНОЕ СООТВЕТВИЕ (актуально только для pALARM )
      const TYPE_SENSOR SENSORTYPE[INUMBER]={/*pALARM,*/pALARM,pALARM};    // тип контактного датчика  pALARM, pSENSOR,  pPULSE
    // ---------------------------------------------------------------------------------------------------------------------------------------
    // Частотные датчики ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define FNUMBER            2       // Максимальное число частотных датчиков цифровые входы (то что поддерживается) код поддерживает ТРИ датчика максимально
    //  Ноги куда прицепленны контактные датчики
    #define PIN_SENSOR_FLOWCON   39     // ++ DIN4 Датчик потока по кондесатору
    #define PIN_SENSOR_FLOWEVA   40     // ++ DIN5 Датчик потока по испарителю
  // НЕ ПОДКЛЮЧЕН:
  //  #define PIN_SENSOR_FLOWPCON  68     // ++ DIN6 Датчик протока предконденсатора
     // Имена индексов ВАЖЕН ПОРЯДОК!
    #define FLOWCON        0        // Датчик потока по кондесатору
    #define FLOWEVA        1        // Датчик потока по испарителю
    #define FLOWPCON       2        // Датчик протока по предконденсатору
      // Массив ног соглано индексов
    const uint8_t pinsFrequency[3] = {PIN_SENSOR_FLOWCON,       // - DIN4 Датчик потока по кондесатору
                                      PIN_SENSOR_FLOWEVA        // - DIN5 Датчик потока по испарителю
 //                                   ,PIN_SENSOR_FLOWPCON     // - DIN6 Датчик протока по предконденсатору
                                       };
      // Описание датчиков
    const char *noteFrequency[3] = { "Датчик потока по кондесатору (кубы/час)",       // - DIN4 Датчик потока по кондесатору
                                     "Датчик потока по испарителю (кубы/час)"        // - DIN5 Датчик потока по испарителю
 //                                 ,"Датчик протока по предконденсатору (кубы/час)"  // - DIN6 Датчик протока по предконденсатору
                                      };
      // Имена датчиков
    const char *nameFrequency[3] = { "FLOWCON",                      // Датчик потока по кондесатору
                                     "FLOWEVA"                       // Датчик потока по кондесатору
 //                                  ,"FLOWPCON"            // Датчик протока по предконденсатору
                                           };          
      // не забываем настраивать массивы под число датчиков
    const float TRANSFLOW[3]={50,50};                             // Коэффициент преобразования частота - поток
    const uint16_t TESTFLOW[3]={700,2100};                        // Значения датчиков при тестировании  опция TEST
    const uint16_t MINFLOW[3]= {201,1001};                        // МИНИМАЛЬНЫЕ Значения датчиков


   // Исполнительные устройства (реле и сухие контакты) ВНИМАТЕЛЬНО ПРОВЕРЯЕМ СООТВЕТСВИЕ ВСЕХ МАССИВОВ!!! ------------------------------------------------------------------
    #define RNUMBER         8 //  7        // Число исполнительных устройств (всех)
     // устройства 220 вольт
    #define PIN_DEVICE_RCOMP           46 //[R_1]// ++ Реле включения компрессора (через пускатель)
    #define PIN_DEVICE_RPUMPO          47 //[R_2]// ++ Реле включения насоса выхордного контура  (отопление и ГВС)
    #define PIN_DEVICE_RPUMPB          48 //[R_3]// ++ Реле насоса циркуляции бойлера (ГВС)
    #define PIN_DEVICE_RPUMPI          49 //[R_4]// ++ Реле включения насоса входного контура  (геоконтур)
    #define PIN_DEVICE_RBOILER         50 //[R_5]// ++ Включение ТЭНа бойлера
    #define PIN_DEVICE_RTRV            51 //[R_6]// ++ 4-ходовой клапан
    #define PIN_OMRON_RESET            53 //[R_7]// ++ DOUT2 Выход для сброса инвертора
//  #define PIN_DEVICE_RSUPERBOILER    11 //[R_8]// ++ реле насоса супербойлера
//  #define PIN_DEVICE_RHEAT           12 //[R_9]// ++ Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
//    #define PIN_DEVICE_R3WAY         69 //[R_10]// ++ 3-ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
//  #define PIN_DEVICE_RFAN1           11        // ++ Реле включения вентилятора испарителя №1
//  #define PIN_DEVICE_RFAN2           11        // ++ Реле включения вентилятора испарителя №2
//  #define PIN_DEVICE_REVI            11        // ++ Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
//                                Пины DUE 68, 69 не подключены к плате!

    // Имена индексов ВАЖЕН ПОРЯДОК!
    #define RCOMP              0          // Реле включения компрессора (через пускатель)
    #define RPUMPO             1          // Реле включения насоса выхордного контура  (отопление и ГВС)
    #define RPUMPB             2          // Реле насоса циркуляции бойлера (ГВС)
    #define RPUMPI             3          // Реле включения насоса входного контура  (геоконтур)
    #define RBOILER            4          // Включение ТЭНа бойлера
    #define RTRV               5          // 4-ходовой клапан (охлаждение)
    #define RRESET             6          // Выход для сброса инвертора
	#define RPUMPF             7          // Реле насоса Теплого Пола
  // удалить:
 //    #define R3WAY              7          // Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)

 //   #define RSUPERBOILER       6          // реле насоса супербойлера
 //   #define RFAN1              5          // Реле включения вентилятора испарителя №1
 //   #define RFAN2              6          // Реле включения вентилятора испарителя №2
 //   #define REVI               6          // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
 //   #define RHEAT              7          // Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
     
   // Массив ног соглано индексов
   const uint8_t pinsRelay[RNUMBER] = { PIN_DEVICE_RCOMP,       // ++ Реле включения компрессора (через пускатель)
                                        PIN_DEVICE_RPUMPO,      // ++ Реле включения насоса выхордного контура  (отопление и ГВС)
                                        PIN_DEVICE_RPUMPB,      // ++ Реле насоса циркуляции бойлера (ГВС)
                                        PIN_DEVICE_RPUMPI,      // ++ Реле включения насоса входного контура  (геоконтур)
                                        PIN_DEVICE_RBOILER,     // ++ Включение ТЭНа бойлера
                                        PIN_DEVICE_RTRV,    // ++ 4-ходовой клапан
                                        PIN_OMRON_RESET        // ++ Выход для сброса инвертора

  //                                      PIN_DEVICE_R3WAY        // - Трех ходовой кран. Переключение системы СО — ГВС (что сейчас греть)
  //                                      PIN_DEVICE_RSUPERBOILER ,
  //                                      
                                        // ++ реле насоса супербойлера
  //                                      PIN_DEVICE_RFAN1,       // - Реле включения вентилятора испарителя №1
  //                                      PIN_DEVICE_RFAN2,       // - Реле включения вентилятора испарителя №2
  //                                      PIN_DEVICE_REVI,        // ++ PWR_ON7 Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
  //                                      PIN_DEVICE_RHEAT,       // - Включение ТЭНа СО (электрокотел), может использоваться как догрев, резерв и т.д.
  //                                      PIN_DEVICE_RPUMPB       // ++ PWR_ON8 Реле насоса циркуляции бойлера (ГВС)
                                        
                                       };
// Описание реле
  const char *noteRelay[RNUMBER] =  {"Реле включения компрессора",
                                     "Реле включения насоса отопления",
                                     "Реле насоса циркуляции бойлера (ГВС)",
                                     "Реле включения насоса геоконтура",
                                     "Реле включение ТЭНа бойлера",
                                     "Реверсивный клапан",
                                     "Реле сброса ошибки инвертора"

  //                   "Трех ходовой кран"
  //                                   
  //                                   "Реле включения вентилятора испарителя №1",
  //                                   "Реле включения вентилятора испарителя №2",
  //                                   "Соленойд для EVI (испаритель ниже +3гр и конденсатор выше +40гр) ",
    //                                 "Реле включение ТЭНа системы отопления (электрокотел)",
    //                                 "Реле насоса циркуляции бойлера (ГВС)"
                                   };
   //  Имя реле
  const char *nameRelay[RNUMBER] = { "RCOMP",          // Реле включения компрессора
                                     "RPUMPO",         // Реле включения насоса отопления
                                     "RPUMPB",         // Реле насоса циркуляции бойлера (ГВС)
                                     "RPUMPI",         // Реле включения насоса геоконтура
                                     "RBOILER",        // Реле включение ТЭНа бойлера
                                     "RTRV",           // 4-ходовой клапан инвертирован
                                     "RRESET"     // ++ Выход для сброса инвертора

  //                                   "R3WAY"          // Трех ходовой кран, переключение ТН между отоплением и ГВС,
  //                                   "RSUPERBOILER",  // + реле насоса супербойлера
  //                                   "RFAN1",          // Реле включения вентилятора испарителя №1
  //                                   "RFAN2",          // Реле включения вентилятора испарителя №2
  //                                   "REVI",           // Соленойд для EVI. (испаритель ниже +3гр и конденсатор выше +40гр)
       //                              "RHEAT",          // Реле насоса циркуляции бойлера (ГВС)
      //                               "RPUMPB"         // Выход для управления пуском инвертора
                                      
                                     } ;     
 
  // ДАТЧИКИ ТЕМПЕРАТУРЫ. СОТЫЕ ГРАДУСА ------------------------------------------------------------------------
  // наличие датчиков  датчиков от конфигурации минимальные максимальные и тестовые температуры
  // Температура хранится в сотых градуса
  // Нумерация датчиков
  // --------------------------------------------------------------------------------
  // ДАТЧИКИ и УСТРОЙСТВА - максимально поддерживаемые
  // --------------------------------------------------------------------------------
  #undef TNUMBER
  #define TNUMBER     14      // Максимальное число температурных датчиков (то что поддерживается)
  #undef IPNUMBER
  #define IPNUMBER    1       // Максимальное число удаленных датчиков, запрет использования  SENSOR_IP

  #define OVERRIDE_TNUMBERS
  #ifdef OVERRIDE_TNUMBERS
    #define TOUT        0    // Температура улицы
    #define TIN         1    // Температура в доме
    #define TBOILER     2    // Температура в бойлере ГВС
    #define TCOMP       3    // Температура нагнетания компрессора
    #define TEVAING     4    // Температура на входе испарителя (по гликолю)
    #define TEVAOUTG    5    // Температура на выходе испарителя (по гликолю)
    #define TCONING     6    // Температура на входе конденсатора (по гликолю)
    #define TCONOUTG    7    // Температура на выходе конденсатора (по гликолю)
    #define TEVAOUT     8    // Температура на выходе испарителя (по фреону)
    #define TCONOUT     9    // Температура на выходе конденсатора (по фреону)
        // Отсутствующие датчики:
    #define TRTOOUT     13   // Температура на выходе RTO (по фреону)
    #define TCONIN      13   // Температура на входе конденсатора (по фреону)
    #define TEVAIN      13   // Температура на входе испарителя (по фреону)
    #define TACCUM      13   // Температура на выходе теплоаккмулятора
    // Наличие датчика в конфигурации: 0 - нет, 1 - есть
    //...................................0.....1.....2.....3.....4.....5.....6.....7.....8.....9....10....11....12....13..
    const boolean SENSORTEMP[TNUMBER]={    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0 };
    // минимальные значения температур
    const int16_t MINTEMP[TNUMBER] = { -4000,-1000,  100,-1000,-2000,-2000,-2000,-2000,-2000,-2000,-2000,-2000,-2000,-2000 };
    // Макимальные значения температур
    const int16_t MAXTEMP[TNUMBER] = {  7000, 5000,10500,10000, 9500, 9500, 5000, 5000, 9500, 9500, 9500, 9500, 9500, 9500 };
    // Значения датчиков при тестировании, опция TEST
    const int16_t TESTTEMP[TNUMBER]= {  1000, 2000, 6000, 5000,  500,  100, 3000, 3500, -200, 3300, 1000, 1000, 1000, 1000 };
    // Ошибки датчиков (систематические) нужны для калибровки ОШИБКИ ДОБАВЛЯЮТСЯ!!! к значениям В СОТЫХ ГРАДУСА
    const int16_t ERRTEMP[TNUMBER]=  {     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 };
        // Имена датчиков
    const char *nameTemp[TNUMBER] = {
        "TOUT",             // Температура улицы
        "TIN",              // Температура в доме
        "TBOILER",          // Температура в бойлере ГВС
        "TCOMP",            // Температура нагнетания компрессора
        "TEVAING",          // Температура на входе испарителя по гликолю
        "TEVAOUTG",         // Температура на выходе испарителя по гликолю
        "TCONING",          // Температура на входе конденсатора по гликолю
        "TCONOUTG",         // Температура на выходе конденсатора по гликолю
        "TEVAOUT",          // Температура на выходе испарителя по фреону
        "TCONOUT",          // Температура на выходе конденсатора по фреону
        "none",
        "none",
        "none",
        "none"
//        "TRTOOUT",          // Температура на выходе RTO (по фреону)
//        "TEVAIN",           // Температура на входе испарителя по фреону
//        "TCONIN",           // Температура на входе конденсатора по фреону
//        "TACCUM",           // Температура на выходе теплоаккмулятора
    };
    // Описание датчиков
    const char *noteTemp[TNUMBER] = {
        "Температура улицы",
        "Температура в доме",
        "Температура в бойлере ГВС",
        "Температура нагнетания компрессора",
        "Температура на входе испарителя по гликолю",
        "Температура на выходе испарителя по гликолю",
        "Температура на входе конденсатора по гликолю",
        "Температура на выходе конденсатора по гликолю",
        "Температура на выходе испарителя по фреону",
        "Температура на выходе конденсатора по фреону",
        "не подключен",
        "не подключен",
        "не подключен",
        "не подключен"
//        "Температура на выходе РТО (по фреону)",
//        "Температура на входе испарителя по фреону",
//        "Температура на входе конденсатора по фреону",
//        "Температура на выходе теплоаккумулятора",
    };
  #endif

  #define TIME_READ_SENSOR  1250 //4000  // Период опроса датчиков (мсек), к нему добавляется время DELAY_DS1820(750мсек) и 1мсек * TNUMBER
  #define T_NUMSAMLES       1              // Число значений для усреднения показаний температуры
  #define GAP_TEMP_VAL      500  //300     // Допустимая разница (в сотых C) показаний между двумя считываниями (борьба с помехами) - при привышении ошибка не возникает, но данные пропускаются.
  #define GAP_NUMBER        2    //3       // Максимальное число идущих подряд показаний превышающих на GAP_TEMP_VAL, после этого эти показания выдаются за действительные

  // АНАЛОГОВЫЕ ДАТЧИКИ  -------------------------------------------------------------------
  #undef ANUMBER
  #define ANUMBER     2       // Максимальное число аналоговых датчиков (то что поддерживается)
  // наличие датчиков в конфигурации минимальные максимальные и тестовые значения
  /* Справочно нумерация датчиков
  * Давление харится в сотых бара
  * #define PEVA        0                // Датчик давления испарителя.
  * #define PCON        1                // Датчик давления конденсатора.
  */
  const boolean SENSORPRESS[ANUMBER]  = {true , true};
  const int16_t MINPRESS[ANUMBER]   = {  50 ,  200  };       // минимальные значения давления
  const uint16_t MAXPRESS[ANUMBER]  = { 700 , 3100  };    // Максимальные значения давления
  const uint16_t TESTPRESS[ANUMBER] = { 150 , 1200  };    // Значения датчиков при тестировании  опция TEST


  // Конфигурация системы отопления --------------------------------------------------------------------------------
  // от куда брать температуру обратки и подачи системы отопления смотртеть кондесатор.
  // Могут быть задействованы разные датчики!
  #define FEED      sTemp[TCONOUTG].get_Temp()               // Подача системы CO
  #define RET       sTemp[TCONING].get_Temp()                // Обратка системы CO
     
    // Определение насосов конденсатора и испарителя по именам
  #define PUMP_OUT      RPUMPO                               // Насос выходного контура (отопление)
  #define PUMP_IN       RPUMPI                               // Насос входного  контура (гео или воздушник)

  
  // ------------------- EEV -----------------------------------
  // ЭРВ ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) ------------------
  #define EEV_DEF                     // Наличие ЭРВ в конфигурации
  #ifdef EEV_DEF                               // ЭРВ настройки под конкретную конфигурацию
    //#define EEV_INVERT                       // Признак инвертирования движения ЭРВ  (меняем если крутит в обратную сторону)
    //#define EEV_INT_PID                      // использование ПИДА в целочисленной арифметике
    #define EEV_KP_ERR        100.0          // Ошибка (в сотых градуса) при которой происходит уменьшение пропорциональной составляющей ПИД ЭРВ
    #define EEV_SPEED         80             // Скорость шагового двигателя ЭРВ (импульсы в сек.)
    #define EEV_QUEUE         10             // Длина очереди команд шагового двигателя ЭРВ
    #define EEV_STEPS         480            // Число шагов ЭРВ 480
    #define EEV_PSTART        150            // ПУСКОВАЯ позиция ЭРВ (ТО что при старте компрессора ПРИ РАСКРУТКЕ)
    #define EEV_START         100            // СТАРТОВАЯ позиция ЭРВ после раскрутки компрессора т.е. ПОЗИЦИЯ С КОТОРОЙ НАЧИНАЕТСЯ РАБОТА проходит DELAY_START_POS сек
    #define EEV_MIN_STEPS     7              // Минимальное число шагов открытия ЭРВ
    #define EEV_HOLD_MOTOR    false          // Режим "удержания" шагового двигателя ЭРВ
    #define EEV_PHASE         PHASE_8s       // ЗАДАННАЯ (можно менять) последовательность (шагов) при движении ЭРВ
    // ЭРВ Времена и задержки
    #define DELAY_ON_PID_EEV  5             // Задержка включения EEV после включения компрессора (сек).  Точнее после выхода на рабочую позицию Общее время =DELAY_ON_PID_EEV+DELAY_START_POS
    #define DELAY_ON3_EEV     3              // Задержка между открытием (для старта) ЭРВ и включением компрессора, для выравнивания давлений (сек). Если ЭРВ закрывлось при остановке
    #define DELAY_START_POS   5              // Время после старта компрессора когда EEV выходит на стартовую позицию - облегчение пуска вначале ЭРВ
    #define DELAY_OFF_EEV     3              // Задержка закрытия EEV после выключения насосов (сек). Время от команды стоп компрессора до закрытия ЭРВ = DELAY_OFF_PUMP+DELAY_OFF_EEV
  #endif

     // Частотный преобразователь ТОЛЬКО ОДНА ШТУКА ВСЕГДА (не массив) --------------------------------------------------------
  const boolean DEVICEFC=true;  // Наличие Частотного преобразователя в конфигурации
  #define FC_VACON        // Частотник Vacon
 //  #define ANALOG_CONTROL                      // Использование аналогового управления частотником, Для использования 485 закоментировать эту строку
      // Константы частотного преобразователя для конкртеной  реализации
	#define FC_USE_RCOMP                     // Использовать для разрешения работы инвертора отдельный выход RCOMP
					  // Используется дискретный вход частотника (0..30V), прописанный в ячейке P5.7 "Работа разрешена" (modbus #407)
	#define FC_UPTIME            (10*1000)      // Время обновления алгоритма пид регулятора (мсек) Основной цикл управления

	#define FC_PID_FREQ_STEP     (2*100)        // Максимальный шаг (на увеличение) изменения частоты при ПИД регулировании в 0.01 Гц Необходимо что бы ЭРВ успевал
	#define FC_PID_STOP          95          // Проценты от уровня защит (мощность, ток, давление, темпеартура) при которой происходит блокировка роста частоты пидом

	#define FC_DT_COMP_TEMP      (5*100)        // Защита по температуре компрессора - сколько градусов не доходит до максимальной (TCOMP) и при этом происходит уменьшение частоты
	#define FC_DP_CON_PRESS      50             // Защита по давлению компрессора - сколько сотых бара не доходит до максимальной (PCON) и при этом происходит уменьшение частоты

	#define FC_START_FREQ        (50*100)       // Стартовая скорость инвертора (см компрессор) в 0.01 %
	#define FC_START_FREQ_BOILER (40*100)      // Стартовая скорость инвертора (см компрессор) в 0.01 % ГВС

	#define FC_MIN_FREQ          (10*100)       // Минимальная  скорость инвертора (см компрессор) в 0.01 %
	#define FC_MIN_FREQ_COOL     (10*100)       // Минимальная  скорость инвертора при охлаждении в 0.01 %
	#define FC_MIN_FREQ_BOILER   (10*100)       // Минимальная  скорость инвертора при нагреве ГВС в 0.01 %
	#define FC_MIN_FREQ_USER     (25*100)       // Минимальная  скорость инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 %

	#define FC_MAX_FREQ          (100*100)      // Максимальная скорость инвертора (см компрессор) в 0.01 %
	#define FC_MAX_FREQ_COOL     (100*100)      // Максимальная скорость инвертора в режиме охлаждения  в 0.01 %
	#define FC_MAX_FREQ_BOILER   (80*100)       // Максимальная скорость инвертора в режиме ГВС в 0.01 Гц поглощение бойлера обычно меньше чем СО
	#define FC_MAX_FREQ_USER     (190*100)      // Максимальная скорость инвертора РУЧНОЙ РЕЖИМ (см компрессор) в 0.01 %

	#define FC_STEP_FREQ         (1*100)        // Шаг уменьшения инвертора при достижении максимальной температуры, мощности и тока (см компрессор) в 0.01 %
	#define FC_STEP_FREQ_BOILER  (2*100)        // Шаг уменьшения инвертора при достижении максимальной температуры, мощности и тока ГВС в 0.01 %

	#define FC_DT_TEMP           (1*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита (уменьшается частота) в сотых градуса
	#define FC_DT_TEMP_BOILER    (2*100)        // Привышение температуры от уставок (подача) при которой срабатыват защита ГВС в сотых градуса

	#define FC_MAX_POWER         (2.0*10)       // Максимальная мощность инвертора (см компрессор) в 0.1 кВт
	#define FC_MAX_POWER_BOILER  (1.0*10)     // Максимальная мощность инвертора в режиме ГВС (см компрессор) в 0.1 кВт

	#define FC_MAX_CURRENT        (10.0*100)     // Максимальный ток инвертора (см компрессор) в 0.01 А
	#define FC_MAX_CURRENT_BOILER (10.0*100) // Максимальный ток инвертора для ГВС в 0.01 А


	#define FC_ACCEL_TIME        (300*100)        // Время разгона (см компрессор) в 0.01 сек
	#define FC_DEACCEL_TIME      (300*100)        // Время торможения (см компрессор) в 0.01 сек  надо ставить 0 что бы небыло генерации при торможении


     // Временные задержки
    #define DELAY_ON_PUMP     10             // Задержка включения компрессора после включения насосов (сек).
    #define DELAY_OFF_PUMP    90             // Задержка выключения насосов после выключения компрессора (сек).
    #define DELAY_START_RES   (5*60)         // Задержка включения ТН после внезапного сброса контроллера (сек.)
    #define DELAY_REPEAD_START (10*60)       // Задержка перед повторным включениме ТН при ошибке (попытки пуска) секунды
    #define DELAY_DEFROST_ON  120            // ДЛЯ ВОЗДУШНОГО ТН Задержка после срабатывания датчика перед включением разморозки (секунды)
    #define DELAY_DEFROST_OFF 120            // ДЛЯ ВОЗДУШНОГО ТН Задержка перед выключением разморозки (секунды)
    #define DELAY_TRV         120            // Задержка между переключением 4-х ходового клапана и включением компрессора, для выравнивания давлений (сек). Если включены эти опции (переключение тепло-холод)
    #define DELAY_3WAY        60             // Пауза (сек) после переключение3-х ходового крана - выравниваем температуру в контуре отопления/ГВС что бы сразу защиты не сработали
    #define DELAY_BOILER_OFF  120            // Время (сек) на сколько блокируются защиты при переходе с ГВС на отопление и охлаждение слишком горяче после ГВС

#endif  // CONFIG_6      
  
#endif


